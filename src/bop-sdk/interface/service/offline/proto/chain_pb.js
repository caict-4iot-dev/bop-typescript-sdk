/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var common_pb = require("./common_pb.js");
goog.exportSymbol("proto.protocol.Account", null, global);
goog.exportSymbol("proto.protocol.AccountPrivilege", null, global);
goog.exportSymbol("proto.protocol.AccountThreshold", null, global);
goog.exportSymbol("proto.protocol.Asset", null, global);
goog.exportSymbol("proto.protocol.AssetKey", null, global);
goog.exportSymbol("proto.protocol.AssetStore", null, global);
goog.exportSymbol("proto.protocol.BenchSegmentRange", null, global);
goog.exportSymbol("proto.protocol.ConsensusValue", null, global);
goog.exportSymbol("proto.protocol.ConsensusValueBody", null, global);
goog.exportSymbol("proto.protocol.ConsensusValueHeader", null, global);
goog.exportSymbol("proto.protocol.ConsensusValueValidation", null, global);
goog.exportSymbol("proto.protocol.Contract", null, global);
goog.exportSymbol("proto.protocol.Contract.ContractType", null, global);
goog.exportSymbol("proto.protocol.ControlledArea", null, global);
goog.exportSymbol("proto.protocol.ControlledArea.STATUS_FALG", null, global);
goog.exportSymbol("proto.protocol.ControlledArea.TRUST_FLAG", null, global);
goog.exportSymbol("proto.protocol.DAG", null, global);
goog.exportSymbol("proto.protocol.DomainAccountHash", null, global);
goog.exportSymbol("proto.protocol.DomainConfig", null, global);
goog.exportSymbol("proto.protocol.DomainTxCount", null, global);
goog.exportSymbol("proto.protocol.DomainTxs", null, global);
goog.exportSymbol("proto.protocol.DomainTxsIndex", null, global);
goog.exportSymbol("proto.protocol.Ledger", null, global);
goog.exportSymbol("proto.protocol.LedgerHeader", null, global);
goog.exportSymbol("proto.protocol.Limit", null, global);
goog.exportSymbol("proto.protocol.Neighbor", null, global);
goog.exportSymbol("proto.protocol.Operation", null, global);
goog.exportSymbol("proto.protocol.Operation.Type", null, global);
goog.exportSymbol("proto.protocol.OperationAuthorizeTransfer", null, global);
goog.exportSymbol("proto.protocol.OperationCreateAccount", null, global);
goog.exportSymbol("proto.protocol.OperationLog", null, global);
goog.exportSymbol("proto.protocol.OperationPayCoin", null, global);
goog.exportSymbol("proto.protocol.OperationSetControlledArea", null, global);
goog.exportSymbol("proto.protocol.OperationSetMetadata", null, global);
goog.exportSymbol("proto.protocol.OperationSetPrivilege", null, global);
goog.exportSymbol("proto.protocol.OperationSetSignerWeight", null, global);
goog.exportSymbol("proto.protocol.OperationSetThreshold", null, global);
goog.exportSymbol("proto.protocol.OperationTypeThreshold", null, global);
goog.exportSymbol("proto.protocol.OperationUpgradeContract", null, global);
goog.exportSymbol("proto.protocol.Signer", null, global);
goog.exportSymbol("proto.protocol.Signer.Limit", null, global);
goog.exportSymbol("proto.protocol.Transaction", null, global);
goog.exportSymbol("proto.protocol.Transaction.Limit", null, global);
goog.exportSymbol("proto.protocol.Transaction.NonceType", null, global);
goog.exportSymbol("proto.protocol.TransactionEnv", null, global);
goog.exportSymbol("proto.protocol.TransactionEnvSet", null, global);
goog.exportSymbol("proto.protocol.TransactionEnvStore", null, global);
goog.exportSymbol("proto.protocol.Trigger", null, global);
goog.exportSymbol("proto.protocol.Trigger.OperationTrigger", null, global);
goog.exportSymbol("proto.protocol.Trigger.TransactionType", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Account = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Account.displayName = "proto.protocol.Account";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Account.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Account.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Account} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Account.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: msg.getAddress(),
        nonce: msg.getNonce(),
        priv:
          (f = msg.getPriv()) &&
          proto.protocol.AccountPrivilege.toObject(includeInstance, f),
        metadatasHash: msg.getMetadatasHash_asB64(),
        assetsHash: msg.getAssetsHash_asB64(),
        contract:
          (f = msg.getContract()) &&
          proto.protocol.Contract.toObject(includeInstance, f),
        balance: msg.getBalance(),
        controlledArea:
          (f = msg.getControlledArea()) &&
          proto.protocol.ControlledArea.toObject(includeInstance, f),
        publicKey: msg.getPublicKey(),
        authTransfer: msg.getAuthTransfer(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Account}
 */
proto.protocol.Account.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Account();
  return proto.protocol.Account.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Account}
 */
proto.protocol.Account.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setNonce(value);
        break;
      case 3:
        var value = new proto.protocol.AccountPrivilege();
        reader.readMessage(
          value,
          proto.protocol.AccountPrivilege.deserializeBinaryFromReader,
        );
        msg.setPriv(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMetadatasHash(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAssetsHash(value);
        break;
      case 6:
        var value = new proto.protocol.Contract();
        reader.readMessage(
          value,
          proto.protocol.Contract.deserializeBinaryFromReader,
        );
        msg.setContract(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setBalance(value);
        break;
      case 8:
        var value = new proto.protocol.ControlledArea();
        reader.readMessage(
          value,
          proto.protocol.ControlledArea.deserializeBinaryFromReader,
        );
        msg.setControlledArea(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setPublicKey(value);
        break;
      case 10:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setAuthTransfer(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Account} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Account.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Account.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = this.getPriv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AccountPrivilege.serializeBinaryToWriter,
    );
  }
  f = this.getMetadatasHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getAssetsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = this.getContract();
  if (f != null) {
    writer.writeMessage(6, f, proto.protocol.Contract.serializeBinaryToWriter);
  }
  f = this.getBalance();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = this.getControlledArea();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protocol.ControlledArea.serializeBinaryToWriter,
    );
  }
  f = this.getPublicKey();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = this.getAuthTransfer();
  if (f) {
    writer.writeBool(10, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Account} The clone.
 */
proto.protocol.Account.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Account} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.Account.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.Account.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 nonce = 2;
 * @return {number}
 */
proto.protocol.Account.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Account.prototype.setNonce = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional AccountPrivilege priv = 3;
 * @return {proto.protocol.AccountPrivilege}
 */
proto.protocol.Account.prototype.getPriv = function () {
  return /** @type{proto.protocol.AccountPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountPrivilege, 3)
  );
};

/** @param {proto.protocol.AccountPrivilege|undefined} value  */
proto.protocol.Account.prototype.setPriv = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.Account.prototype.clearPriv = function () {
  this.setPriv(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Account.prototype.hasPriv = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes metadatas_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Account.prototype.getMetadatasHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes metadatas_hash = 4;
 * This is a type-conversion wrapper around `getMetadatasHash()`
 * @return {string}
 */
proto.protocol.Account.prototype.getMetadatasHash_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getMetadatasHash())
  );
};

/**
 * optional bytes metadatas_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadatasHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.getMetadatasHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getMetadatasHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Account.prototype.setMetadatasHash = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bytes assets_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Account.prototype.getAssetsHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes assets_hash = 5;
 * This is a type-conversion wrapper around `getAssetsHash()`
 * @return {string}
 */
proto.protocol.Account.prototype.getAssetsHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAssetsHash()));
};

/**
 * optional bytes assets_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetsHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.getAssetsHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getAssetsHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Account.prototype.setAssetsHash = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional Contract contract = 6;
 * @return {proto.protocol.Contract}
 */
proto.protocol.Account.prototype.getContract = function () {
  return /** @type{proto.protocol.Contract} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Contract, 6)
  );
};

/** @param {proto.protocol.Contract|undefined} value  */
proto.protocol.Account.prototype.setContract = function (value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.protocol.Account.prototype.clearContract = function () {
  this.setContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Account.prototype.hasContract = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional int64 balance = 7;
 * @return {number}
 */
proto.protocol.Account.prototype.getBalance = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};

/** @param {number} value  */
proto.protocol.Account.prototype.setBalance = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional ControlledArea controlled_area = 8;
 * @return {proto.protocol.ControlledArea}
 */
proto.protocol.Account.prototype.getControlledArea = function () {
  return /** @type{proto.protocol.ControlledArea} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ControlledArea, 8)
  );
};

/** @param {proto.protocol.ControlledArea|undefined} value  */
proto.protocol.Account.prototype.setControlledArea = function (value) {
  jspb.Message.setWrapperField(this, 8, value);
};

proto.protocol.Account.prototype.clearControlledArea = function () {
  this.setControlledArea(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Account.prototype.hasControlledArea = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * optional string public_key = 9;
 * @return {string}
 */
proto.protocol.Account.prototype.getPublicKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};

/** @param {string} value  */
proto.protocol.Account.prototype.setPublicKey = function (value) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional bool auth_transfer = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.Account.prototype.getAuthTransfer = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 10, false));
};

/** @param {boolean} value  */
proto.protocol.Account.prototype.setAuthTransfer = function (value) {
  jspb.Message.setField(this, 10, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ControlledArea = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.ControlledArea.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.ControlledArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ControlledArea.displayName = "proto.protocol.ControlledArea";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ControlledArea.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ControlledArea.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.ControlledArea.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ControlledArea} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.ControlledArea.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        trusted: msg.getTrusted(),
        status: msg.getStatus(),
        attributesList: jspb.Message.toObjectList(
          msg.getAttributesList(),
          common_pb.KeyPair.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ControlledArea}
 */
proto.protocol.ControlledArea.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ControlledArea();
  return proto.protocol.ControlledArea.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ControlledArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ControlledArea}
 */
proto.protocol.ControlledArea.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.protocol.ControlledArea.TRUST_FLAG} */ (
          reader.readEnum()
        );
        msg.setTrusted(value);
        break;
      case 2:
        var value = /** @type {!proto.protocol.ControlledArea.STATUS_FALG} */ (
          reader.readEnum()
        );
        msg.setStatus(value);
        break;
      case 3:
        var value = new common_pb.KeyPair();
        reader.readMessage(
          value,
          common_pb.KeyPair.deserializeBinaryFromReader,
        );
        msg.getAttributesList().push(value);
        msg.setAttributesList(msg.getAttributesList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ControlledArea} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ControlledArea.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ControlledArea.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ControlledArea.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTrusted();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = this.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = this.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.KeyPair.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ControlledArea} The clone.
 */
proto.protocol.ControlledArea.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.ControlledArea} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional TRUST_FLAG trusted = 1;
 * @return {!proto.protocol.ControlledArea.TRUST_FLAG}
 */
proto.protocol.ControlledArea.prototype.getTrusted = function () {
  return /** @type {!proto.protocol.ControlledArea.TRUST_FLAG} */ (
    jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {!proto.protocol.ControlledArea.TRUST_FLAG} value  */
proto.protocol.ControlledArea.prototype.setTrusted = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional STATUS_FALG status = 2;
 * @return {!proto.protocol.ControlledArea.STATUS_FALG}
 */
proto.protocol.ControlledArea.prototype.getStatus = function () {
  return /** @type {!proto.protocol.ControlledArea.STATUS_FALG} */ (
    jspb.Message.getFieldProto3(this, 2, 0)
  );
};

/** @param {!proto.protocol.ControlledArea.STATUS_FALG} value  */
proto.protocol.ControlledArea.prototype.setStatus = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * repeated KeyPair attributes = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.KeyPair>}
 */
proto.protocol.ControlledArea.prototype.getAttributesList = function () {
  return /** @type{!Array.<!proto.protocol.KeyPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.KeyPair, 3)
  );
};

/** @param {Array.<!proto.protocol.KeyPair>} value  */
proto.protocol.ControlledArea.prototype.setAttributesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};

proto.protocol.ControlledArea.prototype.clearAttributesList = function () {
  this.setAttributesList([]);
};

/**
 * @enum {number}
 */
proto.protocol.ControlledArea.TRUST_FLAG = {
  UNCERT: 0,
  TRUSTED: 1,
  UNTRUSTED: 2,
};

/**
 * @enum {number}
 */
proto.protocol.ControlledArea.STATUS_FALG = {
  ENABLED: 0,
  DISABLED: 1,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AssetKey = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AssetKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AssetKey.displayName = "proto.protocol.AssetKey";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.AssetKey.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.AssetKey.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.AssetKey} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.AssetKey.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        issuer: msg.getIssuer(),
        code: msg.getCode(),
        type: msg.getType(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AssetKey}
 */
proto.protocol.AssetKey.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AssetKey();
  return proto.protocol.AssetKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AssetKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AssetKey}
 */
proto.protocol.AssetKey.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setIssuer(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCode(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AssetKey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AssetKey.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AssetKey.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AssetKey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIssuer();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getCode();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.AssetKey} The clone.
 */
proto.protocol.AssetKey.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.AssetKey} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string issuer = 1;
 * @return {string}
 */
proto.protocol.AssetKey.prototype.getIssuer = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.AssetKey.prototype.setIssuer = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string code = 2;
 * @return {string}
 */
proto.protocol.AssetKey.prototype.getCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};

/** @param {string} value  */
proto.protocol.AssetKey.prototype.setCode = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.protocol.AssetKey.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};

/** @param {number} value  */
proto.protocol.AssetKey.prototype.setType = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Asset = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Asset.displayName = "proto.protocol.Asset";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Asset.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Asset.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Asset} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Asset.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key:
          (f = msg.getKey()) &&
          proto.protocol.AssetKey.toObject(includeInstance, f),
        amount: msg.getAmount(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Asset}
 */
proto.protocol.Asset.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Asset();
  return proto.protocol.Asset.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Asset}
 */
proto.protocol.Asset.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.AssetKey();
        reader.readMessage(
          value,
          proto.protocol.AssetKey.deserializeBinaryFromReader,
        );
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Asset} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Asset.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Asset.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Asset.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(1, f, proto.protocol.AssetKey.serializeBinaryToWriter);
  }
  f = this.getAmount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Asset} The clone.
 */
proto.protocol.Asset.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Asset} */ (jspb.Message.cloneMessage(this));
};

/**
 * optional AssetKey key = 1;
 * @return {proto.protocol.AssetKey}
 */
proto.protocol.Asset.prototype.getKey = function () {
  return /** @type{proto.protocol.AssetKey} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AssetKey, 1)
  );
};

/** @param {proto.protocol.AssetKey|undefined} value  */
proto.protocol.Asset.prototype.setKey = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.Asset.prototype.clearKey = function () {
  this.setKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Asset.prototype.hasKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.Asset.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Asset.prototype.setAmount = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AssetStore = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AssetStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AssetStore.displayName = "proto.protocol.AssetStore";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.AssetStore.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.AssetStore.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.AssetStore} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.AssetStore.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key:
          (f = msg.getKey()) &&
          proto.protocol.AssetKey.toObject(includeInstance, f),
        amount: msg.getAmount(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AssetStore}
 */
proto.protocol.AssetStore.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AssetStore();
  return proto.protocol.AssetStore.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AssetStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AssetStore}
 */
proto.protocol.AssetStore.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.AssetKey();
        reader.readMessage(
          value,
          proto.protocol.AssetKey.deserializeBinaryFromReader,
        );
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AssetStore} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AssetStore.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AssetStore.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AssetStore.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(1, f, proto.protocol.AssetKey.serializeBinaryToWriter);
  }
  f = this.getAmount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.AssetStore} The clone.
 */
proto.protocol.AssetStore.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.AssetStore} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional AssetKey key = 1;
 * @return {proto.protocol.AssetKey}
 */
proto.protocol.AssetStore.prototype.getKey = function () {
  return /** @type{proto.protocol.AssetKey} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AssetKey, 1)
  );
};

/** @param {proto.protocol.AssetKey|undefined} value  */
proto.protocol.AssetStore.prototype.setKey = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.AssetStore.prototype.clearKey = function () {
  this.setKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.AssetStore.prototype.hasKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.AssetStore.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.AssetStore.prototype.setAmount = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DomainAccountHash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DomainAccountHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DomainAccountHash.displayName =
    "proto.protocol.DomainAccountHash";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DomainAccountHash.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.DomainAccountHash.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DomainAccountHash} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DomainAccountHash.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        domainId: msg.getDomainId(),
        accountTreeHash: msg.getAccountTreeHash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DomainAccountHash}
 */
proto.protocol.DomainAccountHash.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DomainAccountHash();
  return proto.protocol.DomainAccountHash.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DomainAccountHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DomainAccountHash}
 */
proto.protocol.DomainAccountHash.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDomainId(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAccountTreeHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DomainAccountHash} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainAccountHash.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DomainAccountHash.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainAccountHash.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getDomainId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = this.getAccountTreeHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DomainAccountHash} The clone.
 */
proto.protocol.DomainAccountHash.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DomainAccountHash} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int32 domain_id = 1;
 * @return {number}
 */
proto.protocol.DomainAccountHash.prototype.getDomainId = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.DomainAccountHash.prototype.setDomainId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes account_tree_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.DomainAccountHash.prototype.getAccountTreeHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes account_tree_hash = 2;
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {string}
 */
proto.protocol.DomainAccountHash.prototype.getAccountTreeHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getAccountTreeHash())
    );
  };

/**
 * optional bytes account_tree_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {!Uint8Array}
 */
proto.protocol.DomainAccountHash.prototype.getAccountTreeHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getAccountTreeHash())
    );
  };

/** @param {!(string|Uint8Array)} value  */
proto.protocol.DomainAccountHash.prototype.setAccountTreeHash = function (
  value,
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LedgerHeader = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.LedgerHeader.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.LedgerHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.LedgerHeader.displayName = "proto.protocol.LedgerHeader";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.LedgerHeader.repeatedFields_ = [13];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.LedgerHeader.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.LedgerHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.LedgerHeader} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.LedgerHeader.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        seq: msg.getSeq(),
        hash: msg.getHash_asB64(),
        previousHash: msg.getPreviousHash_asB64(),
        accountTreeHash: msg.getAccountTreeHash_asB64(),
        closeTime: msg.getCloseTime(),
        consensusValueHash: msg.getConsensusValueHash_asB64(),
        version: msg.getVersion(),
        txCount: msg.getTxCount(),
        validatorsHash: msg.getValidatorsHash_asB64(),
        reserve: msg.getReserve(),
        feesHash: msg.getFeesHash_asB64(),
        chainId: msg.getChainId(),
        domainAccountHashsList: jspb.Message.toObjectList(
          msg.getDomainAccountHashsList(),
          proto.protocol.DomainAccountHash.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LedgerHeader}
 */
proto.protocol.LedgerHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.LedgerHeader();
  return proto.protocol.LedgerHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LedgerHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LedgerHeader}
 */
proto.protocol.LedgerHeader.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setSeq(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPreviousHash(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAccountTreeHash(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setCloseTime(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setConsensusValueHash(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setVersion(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTxCount(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValidatorsHash(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setReserve(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFeesHash(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setChainId(value);
        break;
      case 13:
        var value = new proto.protocol.DomainAccountHash();
        reader.readMessage(
          value,
          proto.protocol.DomainAccountHash.deserializeBinaryFromReader,
        );
        msg.getDomainAccountHashsList().push(value);
        msg.setDomainAccountHashsList(msg.getDomainAccountHashsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LedgerHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerHeader.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.LedgerHeader.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getSeq();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getPreviousHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getAccountTreeHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = this.getConsensusValueHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = this.getVersion();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = this.getTxCount();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = this.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = this.getReserve();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = this.getFeesHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = this.getChainId();
  if (f !== 0) {
    writer.writeInt64(12, f);
  }
  f = this.getDomainAccountHashsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.protocol.DomainAccountHash.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.LedgerHeader} The clone.
 */
proto.protocol.LedgerHeader.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.LedgerHeader} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 seq = 1;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.LedgerHeader.prototype.setSeq = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setHash = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes previous_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes previous_hash = 3;
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getPreviousHash())
  );
};

/**
 * optional bytes previous_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getPreviousHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setPreviousHash = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes account_tree_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes account_tree_hash = 4;
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getAccountTreeHash())
  );
};

/**
 * optional bytes account_tree_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getAccountTreeHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setAccountTreeHash = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional int64 close_time = 5;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getCloseTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};

/** @param {number} value  */
proto.protocol.LedgerHeader.prototype.setCloseTime = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes consensus_value_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 6, "")
  );
};

/**
 * optional bytes consensus_value_hash = 6;
 * This is a type-conversion wrapper around `getConsensusValueHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getConsensusValueHash())
    );
  };

/**
 * optional bytes consensus_value_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusValueHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getConsensusValueHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setConsensusValueHash = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional int64 version = 7;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};

/** @param {number} value  */
proto.protocol.LedgerHeader.prototype.setVersion = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional int64 tx_count = 8;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getTxCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};

/** @param {number} value  */
proto.protocol.LedgerHeader.prototype.setTxCount = function (value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional bytes validators_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 9, "")
  );
};

/**
 * optional bytes validators_hash = 9;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getValidatorsHash())
  );
};

/**
 * optional bytes validators_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getValidatorsHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setValidatorsHash = function (value) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional string reserve = 10;
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getReserve = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};

/** @param {string} value  */
proto.protocol.LedgerHeader.prototype.setReserve = function (value) {
  jspb.Message.setField(this, 10, value);
};

/**
 * optional bytes fees_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 11, "")
  );
};

/**
 * optional bytes fees_hash = 11;
 * This is a type-conversion wrapper around `getFeesHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getFeesHash()));
};

/**
 * optional bytes fees_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeesHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getFeesHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.LedgerHeader.prototype.setFeesHash = function (value) {
  jspb.Message.setField(this, 11, value);
};

/**
 * optional int64 chain_id = 12;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getChainId = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};

/** @param {number} value  */
proto.protocol.LedgerHeader.prototype.setChainId = function (value) {
  jspb.Message.setField(this, 12, value);
};

/**
 * repeated DomainAccountHash domain_account_hashs = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.DomainAccountHash>}
 */
proto.protocol.LedgerHeader.prototype.getDomainAccountHashsList = function () {
  return /** @type{!Array.<!proto.protocol.DomainAccountHash>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.protocol.DomainAccountHash,
      13,
    )
  );
};

/** @param {Array.<!proto.protocol.DomainAccountHash>} value  */
proto.protocol.LedgerHeader.prototype.setDomainAccountHashsList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};

proto.protocol.LedgerHeader.prototype.clearDomainAccountHashsList =
  function () {
    this.setDomainAccountHashsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Ledger = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.Ledger.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.Ledger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Ledger.displayName = "proto.protocol.Ledger";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Ledger.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Ledger.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Ledger.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Ledger} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Ledger.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        header:
          (f = msg.getHeader()) &&
          proto.protocol.LedgerHeader.toObject(includeInstance, f),
        transactionEnvsList: jspb.Message.toObjectList(
          msg.getTransactionEnvsList(),
          proto.protocol.TransactionEnv.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Ledger}
 */
proto.protocol.Ledger.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Ledger();
  return proto.protocol.Ledger.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Ledger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Ledger}
 */
proto.protocol.Ledger.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.LedgerHeader();
        reader.readMessage(
          value,
          proto.protocol.LedgerHeader.deserializeBinaryFromReader,
        );
        msg.setHeader(value);
        break;
      case 2:
        var value = new proto.protocol.TransactionEnv();
        reader.readMessage(
          value,
          proto.protocol.TransactionEnv.deserializeBinaryFromReader,
        );
        msg.getTransactionEnvsList().push(value);
        msg.setTransactionEnvsList(msg.getTransactionEnvsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Ledger} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Ledger.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Ledger.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Ledger.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.LedgerHeader.serializeBinaryToWriter,
    );
  }
  f = this.getTransactionEnvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.TransactionEnv.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Ledger} The clone.
 */
proto.protocol.Ledger.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Ledger} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional LedgerHeader header = 1;
 * @return {proto.protocol.LedgerHeader}
 */
proto.protocol.Ledger.prototype.getHeader = function () {
  return /** @type{proto.protocol.LedgerHeader} */ (
    jspb.Message.getWrapperField(this, proto.protocol.LedgerHeader, 1)
  );
};

/** @param {proto.protocol.LedgerHeader|undefined} value  */
proto.protocol.Ledger.prototype.setHeader = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.Ledger.prototype.clearHeader = function () {
  this.setHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Ledger.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated TransactionEnv transaction_envs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.TransactionEnv>}
 */
proto.protocol.Ledger.prototype.getTransactionEnvsList = function () {
  return /** @type{!Array.<!proto.protocol.TransactionEnv>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.TransactionEnv, 2)
  );
};

/** @param {Array.<!proto.protocol.TransactionEnv>} value  */
proto.protocol.Ledger.prototype.setTransactionEnvsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.Ledger.prototype.clearTransactionEnvsList = function () {
  this.setTransactionEnvsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationTypeThreshold = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationTypeThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationTypeThreshold.displayName =
    "proto.protocol.OperationTypeThreshold";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationTypeThreshold.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationTypeThreshold.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationTypeThreshold} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationTypeThreshold.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        type: msg.getType(),
        threshold: msg.getThreshold(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationTypeThreshold.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationTypeThreshold();
  return proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationTypeThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.protocol.Operation.Type} */ (
          reader.readEnum()
        );
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setThreshold(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationTypeThreshold} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationTypeThreshold.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationTypeThreshold.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationTypeThreshold.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getType();
    if (f !== 0.0) {
      writer.writeEnum(1, f);
    }
    f = this.getThreshold();
    if (f !== 0) {
      writer.writeInt64(2, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationTypeThreshold} The clone.
 */
proto.protocol.OperationTypeThreshold.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationTypeThreshold} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional Operation.Type type = 1;
 * @return {!proto.protocol.Operation.Type}
 */
proto.protocol.OperationTypeThreshold.prototype.getType = function () {
  return /** @type {!proto.protocol.Operation.Type} */ (
    jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {!proto.protocol.Operation.Type} value  */
proto.protocol.OperationTypeThreshold.prototype.setType = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 threshold = 2;
 * @return {number}
 */
proto.protocol.OperationTypeThreshold.prototype.getThreshold = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.OperationTypeThreshold.prototype.setThreshold = function (
  value,
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AccountPrivilege = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.AccountPrivilege.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.AccountPrivilege, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AccountPrivilege.displayName =
    "proto.protocol.AccountPrivilege";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.AccountPrivilege.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.AccountPrivilege.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.AccountPrivilege.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.AccountPrivilege} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.AccountPrivilege.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        masterWeight: msg.getMasterWeight(),
        signersList: jspb.Message.toObjectList(
          msg.getSignersList(),
          proto.protocol.Signer.toObject,
          includeInstance,
        ),
        thresholds:
          (f = msg.getThresholds()) &&
          proto.protocol.AccountThreshold.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AccountPrivilege}
 */
proto.protocol.AccountPrivilege.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AccountPrivilege();
  return proto.protocol.AccountPrivilege.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AccountPrivilege} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AccountPrivilege}
 */
proto.protocol.AccountPrivilege.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMasterWeight(value);
        break;
      case 2:
        var value = new proto.protocol.Signer();
        reader.readMessage(
          value,
          proto.protocol.Signer.deserializeBinaryFromReader,
        );
        msg.getSignersList().push(value);
        msg.setSignersList(msg.getSignersList());
        break;
      case 3:
        var value = new proto.protocol.AccountThreshold();
        reader.readMessage(
          value,
          proto.protocol.AccountThreshold.deserializeBinaryFromReader,
        );
        msg.setThresholds(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AccountPrivilege} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AccountPrivilege.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AccountPrivilege.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AccountPrivilege.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getMasterWeight();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = this.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Signer.serializeBinaryToWriter,
    );
  }
  f = this.getThresholds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AccountThreshold.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.AccountPrivilege} The clone.
 */
proto.protocol.AccountPrivilege.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.AccountPrivilege} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 master_weight = 1;
 * @return {number}
 */
proto.protocol.AccountPrivilege.prototype.getMasterWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.AccountPrivilege.prototype.setMasterWeight = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Signer signers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.AccountPrivilege.prototype.getSignersList = function () {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2)
  );
};

/** @param {Array.<!proto.protocol.Signer>} value  */
proto.protocol.AccountPrivilege.prototype.setSignersList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.AccountPrivilege.prototype.clearSignersList = function () {
  this.setSignersList([]);
};

/**
 * optional AccountThreshold thresholds = 3;
 * @return {proto.protocol.AccountThreshold}
 */
proto.protocol.AccountPrivilege.prototype.getThresholds = function () {
  return /** @type{proto.protocol.AccountThreshold} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountThreshold, 3)
  );
};

/** @param {proto.protocol.AccountThreshold|undefined} value  */
proto.protocol.AccountPrivilege.prototype.setThresholds = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.AccountPrivilege.prototype.clearThresholds = function () {
  this.setThresholds(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.AccountPrivilege.prototype.hasThresholds = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AccountThreshold = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.AccountThreshold.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.AccountThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AccountThreshold.displayName =
    "proto.protocol.AccountThreshold";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.AccountThreshold.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.AccountThreshold.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.AccountThreshold.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.AccountThreshold} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.AccountThreshold.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txThreshold: msg.getTxThreshold(),
        typeThresholdsList: jspb.Message.toObjectList(
          msg.getTypeThresholdsList(),
          proto.protocol.OperationTypeThreshold.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AccountThreshold}
 */
proto.protocol.AccountThreshold.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AccountThreshold();
  return proto.protocol.AccountThreshold.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AccountThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AccountThreshold}
 */
proto.protocol.AccountThreshold.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTxThreshold(value);
        break;
      case 2:
        var value = new proto.protocol.OperationTypeThreshold();
        reader.readMessage(
          value,
          proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader,
        );
        msg.getTypeThresholdsList().push(value);
        msg.setTypeThresholdsList(msg.getTypeThresholdsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AccountThreshold} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AccountThreshold.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AccountThreshold.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.AccountThreshold.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTxThreshold();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = this.getTypeThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.OperationTypeThreshold.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.AccountThreshold} The clone.
 */
proto.protocol.AccountThreshold.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.AccountThreshold} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 tx_threshold = 1;
 * @return {number}
 */
proto.protocol.AccountThreshold.prototype.getTxThreshold = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.AccountThreshold.prototype.setTxThreshold = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated OperationTypeThreshold type_thresholds = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.AccountThreshold.prototype.getTypeThresholdsList = function () {
  return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.protocol.OperationTypeThreshold,
      2,
    )
  );
};

/** @param {Array.<!proto.protocol.OperationTypeThreshold>} value  */
proto.protocol.AccountThreshold.prototype.setTypeThresholdsList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.AccountThreshold.prototype.clearTypeThresholdsList =
  function () {
    this.setTypeThresholdsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationPayCoin = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationPayCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationPayCoin.displayName =
    "proto.protocol.OperationPayCoin";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationPayCoin.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationPayCoin.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationPayCoin} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationPayCoin.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        destAddress: msg.getDestAddress(),
        amount: msg.getAmount(),
        input: msg.getInput(),
        rawDestAddress: msg.getRawDestAddress_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationPayCoin}
 */
proto.protocol.OperationPayCoin.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationPayCoin();
  return proto.protocol.OperationPayCoin.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationPayCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationPayCoin}
 */
proto.protocol.OperationPayCoin.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDestAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setAmount(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setInput(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRawDestAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationPayCoin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationPayCoin.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationPayCoin.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationPayCoin.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getDestAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getAmount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = this.getInput();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = this.getRawDestAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationPayCoin} The clone.
 */
proto.protocol.OperationPayCoin.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationPayCoin} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationPayCoin.prototype.getDestAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationPayCoin.prototype.setDestAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.OperationPayCoin.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.OperationPayCoin.prototype.setAmount = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string input = 3;
 * @return {string}
 */
proto.protocol.OperationPayCoin.prototype.getInput = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};

/** @param {string} value  */
proto.protocol.OperationPayCoin.prototype.setInput = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes raw_dest_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.OperationPayCoin.prototype.getRawDestAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes raw_dest_address = 4;
 * This is a type-conversion wrapper around `getRawDestAddress()`
 * @return {string}
 */
proto.protocol.OperationPayCoin.prototype.getRawDestAddress_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getRawDestAddress())
    );
  };

/**
 * optional bytes raw_dest_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawDestAddress()`
 * @return {!Uint8Array}
 */
proto.protocol.OperationPayCoin.prototype.getRawDestAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getRawDestAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.OperationPayCoin.prototype.setRawDestAddress = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetSignerWeight = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationSetSignerWeight.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationSetSignerWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetSignerWeight.displayName =
    "proto.protocol.OperationSetSignerWeight";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetSignerWeight.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationSetSignerWeight.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationSetSignerWeight.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationSetSignerWeight} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationSetSignerWeight.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        masterWeight: msg.getMasterWeight(),
        signersList: jspb.Message.toObjectList(
          msg.getSignersList(),
          proto.protocol.Signer.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.OperationSetSignerWeight.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetSignerWeight();
  return proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetSignerWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMasterWeight(value);
        break;
      case 2:
        var value = new proto.protocol.Signer();
        reader.readMessage(
          value,
          proto.protocol.Signer.deserializeBinaryFromReader,
        );
        msg.getSignersList().push(value);
        msg.setSignersList(msg.getSignersList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetSignerWeight} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetSignerWeight.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetSignerWeight.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetSignerWeight.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getMasterWeight();
    if (f !== 0) {
      writer.writeInt64(1, f);
    }
    f = this.getSignersList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        proto.protocol.Signer.serializeBinaryToWriter,
      );
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationSetSignerWeight} The clone.
 */
proto.protocol.OperationSetSignerWeight.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationSetSignerWeight} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 master_weight = 1;
 * @return {number}
 */
proto.protocol.OperationSetSignerWeight.prototype.getMasterWeight =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
  };

/** @param {number} value  */
proto.protocol.OperationSetSignerWeight.prototype.setMasterWeight = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Signer signers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.OperationSetSignerWeight.prototype.getSignersList = function () {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2)
  );
};

/** @param {Array.<!proto.protocol.Signer>} value  */
proto.protocol.OperationSetSignerWeight.prototype.setSignersList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.OperationSetSignerWeight.prototype.clearSignersList =
  function () {
    this.setSignersList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationLog = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationLog.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationLog.displayName = "proto.protocol.OperationLog";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationLog.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationLog.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationLog.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationLog} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationLog.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        topic: msg.getTopic(),
        datasList: jspb.Message.getField(msg, 2),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationLog}
 */
proto.protocol.OperationLog.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationLog();
  return proto.protocol.OperationLog.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationLog}
 */
proto.protocol.OperationLog.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopic(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.getDatasList().push(value);
        msg.setDatasList(msg.getDatasList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationLog.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationLog.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationLog.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTopic();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getDatasList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationLog} The clone.
 */
proto.protocol.OperationLog.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationLog} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string topic = 1;
 * @return {string}
 */
proto.protocol.OperationLog.prototype.getTopic = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationLog.prototype.setTopic = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated string datas = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protocol.OperationLog.prototype.getDatasList = function () {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};

/** @param {Array.<string>} value  */
proto.protocol.OperationLog.prototype.setDatasList = function (value) {
  jspb.Message.setField(this, 2, value || []);
};

proto.protocol.OperationLog.prototype.clearDatasList = function () {
  jspb.Message.setField(this, 2, []);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetPrivilege = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationSetPrivilege.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationSetPrivilege, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetPrivilege.displayName =
    "proto.protocol.OperationSetPrivilege";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetPrivilege.repeatedFields_ = [2, 4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationSetPrivilege.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationSetPrivilege.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationSetPrivilege} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationSetPrivilege.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        masterWeight: msg.getMasterWeight(),
        signersList: jspb.Message.toObjectList(
          msg.getSignersList(),
          proto.protocol.Signer.toObject,
          includeInstance,
        ),
        txThreshold: msg.getTxThreshold(),
        typeThresholdsList: jspb.Message.toObjectList(
          msg.getTypeThresholdsList(),
          proto.protocol.OperationTypeThreshold.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetPrivilege}
 */
proto.protocol.OperationSetPrivilege.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetPrivilege();
  return proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetPrivilege} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetPrivilege}
 */
proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMasterWeight(value);
        break;
      case 2:
        var value = new proto.protocol.Signer();
        reader.readMessage(
          value,
          proto.protocol.Signer.deserializeBinaryFromReader,
        );
        msg.getSignersList().push(value);
        msg.setSignersList(msg.getSignersList());
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxThreshold(value);
        break;
      case 4:
        var value = new proto.protocol.OperationTypeThreshold();
        reader.readMessage(
          value,
          proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader,
        );
        msg.getTypeThresholdsList().push(value);
        msg.setTypeThresholdsList(msg.getTypeThresholdsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetPrivilege} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetPrivilege.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetPrivilege.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetPrivilege.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getMasterWeight();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getSignersList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        proto.protocol.Signer.serializeBinaryToWriter,
      );
    }
    f = this.getTxThreshold();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
    f = this.getTypeThresholdsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        4,
        f,
        proto.protocol.OperationTypeThreshold.serializeBinaryToWriter,
      );
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationSetPrivilege} The clone.
 */
proto.protocol.OperationSetPrivilege.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationSetPrivilege} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string master_weight = 1;
 * @return {string}
 */
proto.protocol.OperationSetPrivilege.prototype.getMasterWeight = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationSetPrivilege.prototype.setMasterWeight = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Signer signers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.OperationSetPrivilege.prototype.getSignersList = function () {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2)
  );
};

/** @param {Array.<!proto.protocol.Signer>} value  */
proto.protocol.OperationSetPrivilege.prototype.setSignersList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.OperationSetPrivilege.prototype.clearSignersList = function () {
  this.setSignersList([]);
};

/**
 * optional string tx_threshold = 3;
 * @return {string}
 */
proto.protocol.OperationSetPrivilege.prototype.getTxThreshold = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};

/** @param {string} value  */
proto.protocol.OperationSetPrivilege.prototype.setTxThreshold = function (
  value,
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * repeated OperationTypeThreshold type_thresholds = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.OperationSetPrivilege.prototype.getTypeThresholdsList =
  function () {
    return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.protocol.OperationTypeThreshold,
        4,
      )
    );
  };

/** @param {Array.<!proto.protocol.OperationTypeThreshold>} value  */
proto.protocol.OperationSetPrivilege.prototype.setTypeThresholdsList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
  };

proto.protocol.OperationSetPrivilege.prototype.clearTypeThresholdsList =
  function () {
    this.setTypeThresholdsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationAuthorizeTransfer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationAuthorizeTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationAuthorizeTransfer.displayName =
    "proto.protocol.OperationAuthorizeTransfer";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationAuthorizeTransfer.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationAuthorizeTransfer.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationAuthorizeTransfer} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationAuthorizeTransfer.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        destAddress: msg.getDestAddress(),
        auth: msg.getAuth(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationAuthorizeTransfer}
 */
proto.protocol.OperationAuthorizeTransfer.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationAuthorizeTransfer();
  return proto.protocol.OperationAuthorizeTransfer.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationAuthorizeTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationAuthorizeTransfer}
 */
proto.protocol.OperationAuthorizeTransfer.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setDestAddress(value);
          break;
        case 2:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setAuth(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationAuthorizeTransfer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationAuthorizeTransfer.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationAuthorizeTransfer.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationAuthorizeTransfer.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getDestAddress();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getAuth();
    if (f) {
      writer.writeBool(2, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationAuthorizeTransfer} The clone.
 */
proto.protocol.OperationAuthorizeTransfer.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationAuthorizeTransfer} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationAuthorizeTransfer.prototype.getDestAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
  };

/** @param {string} value  */
proto.protocol.OperationAuthorizeTransfer.prototype.setDestAddress = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bool auth = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.OperationAuthorizeTransfer.prototype.getAuth = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};

/** @param {boolean} value  */
proto.protocol.OperationAuthorizeTransfer.prototype.setAuth = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Operation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Operation.displayName = "proto.protocol.Operation";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Operation.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Operation.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Operation} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Operation.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: msg.getType(),
        sourceAddress: msg.getSourceAddress(),
        metadata: msg.getMetadata_asB64(),
        createAccount:
          (f = msg.getCreateAccount()) &&
          proto.protocol.OperationCreateAccount.toObject(includeInstance, f),
        setMetadata:
          (f = msg.getSetMetadata()) &&
          proto.protocol.OperationSetMetadata.toObject(includeInstance, f),
        setSignerWeight:
          (f = msg.getSetSignerWeight()) &&
          proto.protocol.OperationSetSignerWeight.toObject(includeInstance, f),
        setThreshold:
          (f = msg.getSetThreshold()) &&
          proto.protocol.OperationSetThreshold.toObject(includeInstance, f),
        payCoin:
          (f = msg.getPayCoin()) &&
          proto.protocol.OperationPayCoin.toObject(includeInstance, f),
        log:
          (f = msg.getLog()) &&
          proto.protocol.OperationLog.toObject(includeInstance, f),
        setPrivilege:
          (f = msg.getSetPrivilege()) &&
          proto.protocol.OperationSetPrivilege.toObject(includeInstance, f),
        upgradeContract:
          (f = msg.getUpgradeContract()) &&
          proto.protocol.OperationUpgradeContract.toObject(includeInstance, f),
        setControlledArea:
          (f = msg.getSetControlledArea()) &&
          proto.protocol.OperationSetControlledArea.toObject(
            includeInstance,
            f,
          ),
        authorizeTransfer:
          (f = msg.getAuthorizeTransfer()) &&
          proto.protocol.OperationAuthorizeTransfer.toObject(
            includeInstance,
            f,
          ),
        rawSourceAddress: msg.getRawSourceAddress_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Operation}
 */
proto.protocol.Operation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Operation();
  return proto.protocol.Operation.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Operation}
 */
proto.protocol.Operation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.protocol.Operation.Type} */ (
          reader.readEnum()
        );
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSourceAddress(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMetadata(value);
        break;
      case 4:
        var value = new proto.protocol.OperationCreateAccount();
        reader.readMessage(
          value,
          proto.protocol.OperationCreateAccount.deserializeBinaryFromReader,
        );
        msg.setCreateAccount(value);
        break;
      case 7:
        var value = new proto.protocol.OperationSetMetadata();
        reader.readMessage(
          value,
          proto.protocol.OperationSetMetadata.deserializeBinaryFromReader,
        );
        msg.setSetMetadata(value);
        break;
      case 8:
        var value = new proto.protocol.OperationSetSignerWeight();
        reader.readMessage(
          value,
          proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader,
        );
        msg.setSetSignerWeight(value);
        break;
      case 9:
        var value = new proto.protocol.OperationSetThreshold();
        reader.readMessage(
          value,
          proto.protocol.OperationSetThreshold.deserializeBinaryFromReader,
        );
        msg.setSetThreshold(value);
        break;
      case 10:
        var value = new proto.protocol.OperationPayCoin();
        reader.readMessage(
          value,
          proto.protocol.OperationPayCoin.deserializeBinaryFromReader,
        );
        msg.setPayCoin(value);
        break;
      case 11:
        var value = new proto.protocol.OperationLog();
        reader.readMessage(
          value,
          proto.protocol.OperationLog.deserializeBinaryFromReader,
        );
        msg.setLog(value);
        break;
      case 12:
        var value = new proto.protocol.OperationSetPrivilege();
        reader.readMessage(
          value,
          proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader,
        );
        msg.setSetPrivilege(value);
        break;
      case 13:
        var value = new proto.protocol.OperationUpgradeContract();
        reader.readMessage(
          value,
          proto.protocol.OperationUpgradeContract.deserializeBinaryFromReader,
        );
        msg.setUpgradeContract(value);
        break;
      case 14:
        var value = new proto.protocol.OperationSetControlledArea();
        reader.readMessage(
          value,
          proto.protocol.OperationSetControlledArea.deserializeBinaryFromReader,
        );
        msg.setSetControlledArea(value);
        break;
      case 15:
        var value = new proto.protocol.OperationAuthorizeTransfer();
        reader.readMessage(
          value,
          proto.protocol.OperationAuthorizeTransfer.deserializeBinaryFromReader,
        );
        msg.setAuthorizeTransfer(value);
        break;
      case 20:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRawSourceAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Operation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Operation.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Operation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Operation.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = this.getSourceAddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = this.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getCreateAccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.OperationCreateAccount.serializeBinaryToWriter,
    );
  }
  f = this.getSetMetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.OperationSetMetadata.serializeBinaryToWriter,
    );
  }
  f = this.getSetSignerWeight();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protocol.OperationSetSignerWeight.serializeBinaryToWriter,
    );
  }
  f = this.getSetThreshold();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protocol.OperationSetThreshold.serializeBinaryToWriter,
    );
  }
  f = this.getPayCoin();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.protocol.OperationPayCoin.serializeBinaryToWriter,
    );
  }
  f = this.getLog();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.protocol.OperationLog.serializeBinaryToWriter,
    );
  }
  f = this.getSetPrivilege();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.protocol.OperationSetPrivilege.serializeBinaryToWriter,
    );
  }
  f = this.getUpgradeContract();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.protocol.OperationUpgradeContract.serializeBinaryToWriter,
    );
  }
  f = this.getSetControlledArea();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.protocol.OperationSetControlledArea.serializeBinaryToWriter,
    );
  }
  f = this.getAuthorizeTransfer();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.protocol.OperationAuthorizeTransfer.serializeBinaryToWriter,
    );
  }
  f = this.getRawSourceAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(20, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Operation} The clone.
 */
proto.protocol.Operation.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Operation} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional Type type = 1;
 * @return {!proto.protocol.Operation.Type}
 */
proto.protocol.Operation.prototype.getType = function () {
  return /** @type {!proto.protocol.Operation.Type} */ (
    jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {!proto.protocol.Operation.Type} value  */
proto.protocol.Operation.prototype.setType = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string source_address = 2;
 * @return {string}
 */
proto.protocol.Operation.prototype.getSourceAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};

/** @param {string} value  */
proto.protocol.Operation.prototype.setSourceAddress = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Operation.prototype.getMetadata = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.protocol.Operation.prototype.getMetadata_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMetadata()));
};

/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.protocol.Operation.prototype.getMetadata_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getMetadata())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Operation.prototype.setMetadata = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional OperationCreateAccount create_account = 4;
 * @return {proto.protocol.OperationCreateAccount}
 */
proto.protocol.Operation.prototype.getCreateAccount = function () {
  return /** @type{proto.protocol.OperationCreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationCreateAccount, 4)
  );
};

/** @param {proto.protocol.OperationCreateAccount|undefined} value  */
proto.protocol.Operation.prototype.setCreateAccount = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.protocol.Operation.prototype.clearCreateAccount = function () {
  this.setCreateAccount(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasCreateAccount = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional OperationSetMetadata set_metadata = 7;
 * @return {proto.protocol.OperationSetMetadata}
 */
proto.protocol.Operation.prototype.getSetMetadata = function () {
  return /** @type{proto.protocol.OperationSetMetadata} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetMetadata, 7)
  );
};

/** @param {proto.protocol.OperationSetMetadata|undefined} value  */
proto.protocol.Operation.prototype.setSetMetadata = function (value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.protocol.Operation.prototype.clearSetMetadata = function () {
  this.setSetMetadata(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasSetMetadata = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional OperationSetSignerWeight set_signer_weight = 8;
 * @return {proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.Operation.prototype.getSetSignerWeight = function () {
  return /** @type{proto.protocol.OperationSetSignerWeight} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.OperationSetSignerWeight,
      8,
    )
  );
};

/** @param {proto.protocol.OperationSetSignerWeight|undefined} value  */
proto.protocol.Operation.prototype.setSetSignerWeight = function (value) {
  jspb.Message.setWrapperField(this, 8, value);
};

proto.protocol.Operation.prototype.clearSetSignerWeight = function () {
  this.setSetSignerWeight(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasSetSignerWeight = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * optional OperationSetThreshold set_threshold = 9;
 * @return {proto.protocol.OperationSetThreshold}
 */
proto.protocol.Operation.prototype.getSetThreshold = function () {
  return /** @type{proto.protocol.OperationSetThreshold} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetThreshold, 9)
  );
};

/** @param {proto.protocol.OperationSetThreshold|undefined} value  */
proto.protocol.Operation.prototype.setSetThreshold = function (value) {
  jspb.Message.setWrapperField(this, 9, value);
};

proto.protocol.Operation.prototype.clearSetThreshold = function () {
  this.setSetThreshold(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasSetThreshold = function () {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional OperationPayCoin pay_coin = 10;
 * @return {proto.protocol.OperationPayCoin}
 */
proto.protocol.Operation.prototype.getPayCoin = function () {
  return /** @type{proto.protocol.OperationPayCoin} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationPayCoin, 10)
  );
};

/** @param {proto.protocol.OperationPayCoin|undefined} value  */
proto.protocol.Operation.prototype.setPayCoin = function (value) {
  jspb.Message.setWrapperField(this, 10, value);
};

proto.protocol.Operation.prototype.clearPayCoin = function () {
  this.setPayCoin(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasPayCoin = function () {
  return jspb.Message.getField(this, 10) != null;
};

/**
 * optional OperationLog log = 11;
 * @return {proto.protocol.OperationLog}
 */
proto.protocol.Operation.prototype.getLog = function () {
  return /** @type{proto.protocol.OperationLog} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationLog, 11)
  );
};

/** @param {proto.protocol.OperationLog|undefined} value  */
proto.protocol.Operation.prototype.setLog = function (value) {
  jspb.Message.setWrapperField(this, 11, value);
};

proto.protocol.Operation.prototype.clearLog = function () {
  this.setLog(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasLog = function () {
  return jspb.Message.getField(this, 11) != null;
};

/**
 * optional OperationSetPrivilege set_privilege = 12;
 * @return {proto.protocol.OperationSetPrivilege}
 */
proto.protocol.Operation.prototype.getSetPrivilege = function () {
  return /** @type{proto.protocol.OperationSetPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetPrivilege, 12)
  );
};

/** @param {proto.protocol.OperationSetPrivilege|undefined} value  */
proto.protocol.Operation.prototype.setSetPrivilege = function (value) {
  jspb.Message.setWrapperField(this, 12, value);
};

proto.protocol.Operation.prototype.clearSetPrivilege = function () {
  this.setSetPrivilege(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasSetPrivilege = function () {
  return jspb.Message.getField(this, 12) != null;
};

/**
 * optional OperationUpgradeContract upgrade_contract = 13;
 * @return {proto.protocol.OperationUpgradeContract}
 */
proto.protocol.Operation.prototype.getUpgradeContract = function () {
  return /** @type{proto.protocol.OperationUpgradeContract} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.OperationUpgradeContract,
      13,
    )
  );
};

/** @param {proto.protocol.OperationUpgradeContract|undefined} value  */
proto.protocol.Operation.prototype.setUpgradeContract = function (value) {
  jspb.Message.setWrapperField(this, 13, value);
};

proto.protocol.Operation.prototype.clearUpgradeContract = function () {
  this.setUpgradeContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasUpgradeContract = function () {
  return jspb.Message.getField(this, 13) != null;
};

/**
 * optional OperationSetControlledArea set_controlled_area = 14;
 * @return {proto.protocol.OperationSetControlledArea}
 */
proto.protocol.Operation.prototype.getSetControlledArea = function () {
  return /** @type{proto.protocol.OperationSetControlledArea} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.OperationSetControlledArea,
      14,
    )
  );
};

/** @param {proto.protocol.OperationSetControlledArea|undefined} value  */
proto.protocol.Operation.prototype.setSetControlledArea = function (value) {
  jspb.Message.setWrapperField(this, 14, value);
};

proto.protocol.Operation.prototype.clearSetControlledArea = function () {
  this.setSetControlledArea(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasSetControlledArea = function () {
  return jspb.Message.getField(this, 14) != null;
};

/**
 * optional OperationAuthorizeTransfer authorize_transfer = 15;
 * @return {proto.protocol.OperationAuthorizeTransfer}
 */
proto.protocol.Operation.prototype.getAuthorizeTransfer = function () {
  return /** @type{proto.protocol.OperationAuthorizeTransfer} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.OperationAuthorizeTransfer,
      15,
    )
  );
};

/** @param {proto.protocol.OperationAuthorizeTransfer|undefined} value  */
proto.protocol.Operation.prototype.setAuthorizeTransfer = function (value) {
  jspb.Message.setWrapperField(this, 15, value);
};

proto.protocol.Operation.prototype.clearAuthorizeTransfer = function () {
  this.setAuthorizeTransfer(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Operation.prototype.hasAuthorizeTransfer = function () {
  return jspb.Message.getField(this, 15) != null;
};

/**
 * optional bytes raw_source_address = 20;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Operation.prototype.getRawSourceAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 20, "")
  );
};

/**
 * optional bytes raw_source_address = 20;
 * This is a type-conversion wrapper around `getRawSourceAddress()`
 * @return {string}
 */
proto.protocol.Operation.prototype.getRawSourceAddress_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getRawSourceAddress())
  );
};

/**
 * optional bytes raw_source_address = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawSourceAddress()`
 * @return {!Uint8Array}
 */
proto.protocol.Operation.prototype.getRawSourceAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getRawSourceAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Operation.prototype.setRawSourceAddress = function (value) {
  jspb.Message.setField(this, 20, value);
};

/**
 * @enum {number}
 */
proto.protocol.Operation.Type = {
  UNKNOWN: 0,
  CREATE_ACCOUNT: 1,
  SET_METADATA: 4,
  SET_SIGNER_WEIGHT: 5,
  SET_THRESHOLD: 6,
  PAY_COIN: 7,
  LOG: 8,
  SET_PRIVILEGE: 9,
  UPGRADE_CONTRACT: 10,
  SET_CONTROLLED_AREA: 11,
  AUTHORIZE_TRANSFER: 12,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetThreshold = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationSetThreshold.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationSetThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetThreshold.displayName =
    "proto.protocol.OperationSetThreshold";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetThreshold.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationSetThreshold.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationSetThreshold.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationSetThreshold} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationSetThreshold.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        txThreshold: msg.getTxThreshold(),
        typeThresholdsList: jspb.Message.toObjectList(
          msg.getTypeThresholdsList(),
          proto.protocol.OperationTypeThreshold.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetThreshold}
 */
proto.protocol.OperationSetThreshold.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetThreshold();
  return proto.protocol.OperationSetThreshold.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetThreshold}
 */
proto.protocol.OperationSetThreshold.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTxThreshold(value);
        break;
      case 4:
        var value = new proto.protocol.OperationTypeThreshold();
        reader.readMessage(
          value,
          proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader,
        );
        msg.getTypeThresholdsList().push(value);
        msg.setTypeThresholdsList(msg.getTypeThresholdsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetThreshold} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetThreshold.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetThreshold.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetThreshold.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getTxThreshold();
    if (f !== 0) {
      writer.writeInt64(1, f);
    }
    f = this.getTypeThresholdsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        4,
        f,
        proto.protocol.OperationTypeThreshold.serializeBinaryToWriter,
      );
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationSetThreshold} The clone.
 */
proto.protocol.OperationSetThreshold.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationSetThreshold} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 tx_threshold = 1;
 * @return {number}
 */
proto.protocol.OperationSetThreshold.prototype.getTxThreshold = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.OperationSetThreshold.prototype.setTxThreshold = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated OperationTypeThreshold type_thresholds = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.OperationSetThreshold.prototype.getTypeThresholdsList =
  function () {
    return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.protocol.OperationTypeThreshold,
        4,
      )
    );
  };

/** @param {Array.<!proto.protocol.OperationTypeThreshold>} value  */
proto.protocol.OperationSetThreshold.prototype.setTypeThresholdsList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
  };

proto.protocol.OperationSetThreshold.prototype.clearTypeThresholdsList =
  function () {
    this.setTypeThresholdsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Transaction = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.Transaction.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Transaction.displayName = "proto.protocol.Transaction";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Transaction.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Transaction.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Transaction} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Transaction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sourceAddress: msg.getSourceAddress(),
        nonce: msg.getNonce(),
        exprCondition: msg.getExprCondition(),
        operationsList: jspb.Message.toObjectList(
          msg.getOperationsList(),
          proto.protocol.Operation.toObject,
          includeInstance,
        ),
        metadata: msg.getMetadata_asB64(),
        feeLimit: msg.getFeeLimit(),
        gasPrice: msg.getGasPrice(),
        ceilLedgerSeq: msg.getCeilLedgerSeq(),
        chainId: msg.getChainId(),
        addressPrefix: msg.getAddressPrefix(),
        rawSourceAddress: msg.getRawSourceAddress_asB64(),
        domainId: msg.getDomainId(),
        nonceType: msg.getNonceType(),
        maxLedgerSeq: msg.getMaxLedgerSeq(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Transaction}
 */
proto.protocol.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Transaction();
  return proto.protocol.Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Transaction}
 */
proto.protocol.Transaction.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSourceAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setNonce(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setExprCondition(value);
        break;
      case 4:
        var value = new proto.protocol.Operation();
        reader.readMessage(
          value,
          proto.protocol.Operation.deserializeBinaryFromReader,
        );
        msg.getOperationsList().push(value);
        msg.setOperationsList(msg.getOperationsList());
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMetadata(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setFeeLimit(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setGasPrice(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setCeilLedgerSeq(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setChainId(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddressPrefix(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRawSourceAddress(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDomainId(value);
        break;
      case 13:
        var value = /** @type {!proto.protocol.Transaction.NonceType} */ (
          reader.readEnum()
        );
        msg.setNonceType(value);
        break;
      case 14:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMaxLedgerSeq(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Transaction.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Transaction.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getSourceAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = this.getExprCondition();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = this.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.Operation.serializeBinaryToWriter,
    );
  }
  f = this.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = this.getFeeLimit();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = this.getGasPrice();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = this.getCeilLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = this.getChainId();
  if (f !== 0) {
    writer.writeInt64(9, f);
  }
  f = this.getAddressPrefix();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = this.getRawSourceAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = this.getDomainId();
  if (f !== 0) {
    writer.writeInt32(12, f);
  }
  f = this.getNonceType();
  if (f !== 0.0) {
    writer.writeEnum(13, f);
  }
  f = this.getMaxLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(14, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Transaction} The clone.
 */
proto.protocol.Transaction.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Transaction} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string source_address = 1;
 * @return {string}
 */
proto.protocol.Transaction.prototype.getSourceAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.Transaction.prototype.setSourceAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 nonce = 2;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setNonce = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string expr_condition = 3;
 * @return {string}
 */
proto.protocol.Transaction.prototype.getExprCondition = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};

/** @param {string} value  */
proto.protocol.Transaction.prototype.setExprCondition = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * repeated Operation operations = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Operation>}
 */
proto.protocol.Transaction.prototype.getOperationsList = function () {
  return /** @type{!Array.<!proto.protocol.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Operation, 4)
  );
};

/** @param {Array.<!proto.protocol.Operation>} value  */
proto.protocol.Transaction.prototype.setOperationsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

proto.protocol.Transaction.prototype.clearOperationsList = function () {
  this.setOperationsList([]);
};

/**
 * optional bytes metadata = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Transaction.prototype.getMetadata = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes metadata = 5;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.protocol.Transaction.prototype.getMetadata_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMetadata()));
};

/**
 * optional bytes metadata = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.protocol.Transaction.prototype.getMetadata_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getMetadata())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Transaction.prototype.setMetadata = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional int64 fee_limit = 6;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getFeeLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setFeeLimit = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional int64 gas_price = 7;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getGasPrice = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setGasPrice = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional int64 ceil_ledger_seq = 8;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getCeilLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setCeilLedgerSeq = function (value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional int64 chain_id = 9;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getChainId = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setChainId = function (value) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional string address_prefix = 10;
 * @return {string}
 */
proto.protocol.Transaction.prototype.getAddressPrefix = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};

/** @param {string} value  */
proto.protocol.Transaction.prototype.setAddressPrefix = function (value) {
  jspb.Message.setField(this, 10, value);
};

/**
 * optional bytes raw_source_address = 11;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Transaction.prototype.getRawSourceAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 11, "")
  );
};

/**
 * optional bytes raw_source_address = 11;
 * This is a type-conversion wrapper around `getRawSourceAddress()`
 * @return {string}
 */
proto.protocol.Transaction.prototype.getRawSourceAddress_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getRawSourceAddress())
  );
};

/**
 * optional bytes raw_source_address = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawSourceAddress()`
 * @return {!Uint8Array}
 */
proto.protocol.Transaction.prototype.getRawSourceAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getRawSourceAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Transaction.prototype.setRawSourceAddress = function (value) {
  jspb.Message.setField(this, 11, value);
};

/**
 * optional int32 domain_id = 12;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getDomainId = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setDomainId = function (value) {
  jspb.Message.setField(this, 12, value);
};

/**
 * optional NonceType nonce_type = 13;
 * @return {!proto.protocol.Transaction.NonceType}
 */
proto.protocol.Transaction.prototype.getNonceType = function () {
  return /** @type {!proto.protocol.Transaction.NonceType} */ (
    jspb.Message.getFieldProto3(this, 13, 0)
  );
};

/** @param {!proto.protocol.Transaction.NonceType} value  */
proto.protocol.Transaction.prototype.setNonceType = function (value) {
  jspb.Message.setField(this, 13, value);
};

/**
 * optional int64 max_ledger_seq = 14;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getMaxLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};

/** @param {number} value  */
proto.protocol.Transaction.prototype.setMaxLedgerSeq = function (value) {
  jspb.Message.setField(this, 14, value);
};

/**
 * @enum {number}
 */
proto.protocol.Transaction.Limit = {
  UNKNOWN: 0,
  OPERATIONS: 1000,
};

/**
 * @enum {number}
 */
proto.protocol.Transaction.NonceType = {
  INCREASE_NONCE: 0,
  RANDOM_NONCE: 1,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Signer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Signer.displayName = "proto.protocol.Signer";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Signer.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Signer.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Signer} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Signer.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: msg.getAddress(),
        weight: msg.getWeight(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Signer}
 */
proto.protocol.Signer.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Signer();
  return proto.protocol.Signer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Signer}
 */
proto.protocol.Signer.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setWeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Signer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Signer.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Signer.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Signer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getWeight();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Signer} The clone.
 */
proto.protocol.Signer.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Signer} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.Signer.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.Signer.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 weight = 2;
 * @return {number}
 */
proto.protocol.Signer.prototype.getWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Signer.prototype.setWeight = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * @enum {number}
 */
proto.protocol.Signer.Limit = {
  SIGNER_NONE: 0,
  SIGNER: 100,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Trigger = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Trigger.displayName = "proto.protocol.Trigger";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Trigger.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Trigger.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Trigger} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Trigger.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        transactionType: msg.getTransactionType(),
        ledgerSeq: msg.getLedgerSeq(),
        transaction:
          (f = msg.getTransaction()) &&
          proto.protocol.Trigger.OperationTrigger.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Trigger}
 */
proto.protocol.Trigger.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Trigger();
  return proto.protocol.Trigger.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Trigger}
 */
proto.protocol.Trigger.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.protocol.Trigger.TransactionType} */ (
          reader.readEnum()
        );
        msg.setTransactionType(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setLedgerSeq(value);
        break;
      case 3:
        var value = new proto.protocol.Trigger.OperationTrigger();
        reader.readMessage(
          value,
          proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader,
        );
        msg.setTransaction(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Trigger.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Trigger.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTransactionType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = this.getLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = this.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.Trigger.OperationTrigger.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Trigger} The clone.
 */
proto.protocol.Trigger.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Trigger} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional TransactionType transaction_type = 1;
 * @return {!proto.protocol.Trigger.TransactionType}
 */
proto.protocol.Trigger.prototype.getTransactionType = function () {
  return /** @type {!proto.protocol.Trigger.TransactionType} */ (
    jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {!proto.protocol.Trigger.TransactionType} value  */
proto.protocol.Trigger.prototype.setTransactionType = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 ledger_seq = 2;
 * @return {number}
 */
proto.protocol.Trigger.prototype.getLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Trigger.prototype.setLedgerSeq = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional OperationTrigger transaction = 3;
 * @return {proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.prototype.getTransaction = function () {
  return /** @type{proto.protocol.Trigger.OperationTrigger} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.Trigger.OperationTrigger,
      3,
    )
  );
};

/** @param {proto.protocol.Trigger.OperationTrigger|undefined} value  */
proto.protocol.Trigger.prototype.setTransaction = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.Trigger.prototype.clearTransaction = function () {
  this.setTransaction(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.Trigger.prototype.hasTransaction = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * @enum {number}
 */
proto.protocol.Trigger.TransactionType = {
  NORMAL_TRANSACTION: 0,
  CONTRACT_TRANSACTION: 1,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Trigger.OperationTrigger = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Trigger.OperationTrigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Trigger.OperationTrigger.displayName =
    "proto.protocol.Trigger.OperationTrigger";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Trigger.OperationTrigger.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.Trigger.OperationTrigger.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Trigger.OperationTrigger} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Trigger.OperationTrigger.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        hash: msg.getHash_asB64(),
        index: msg.getIndex(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.OperationTrigger.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Trigger.OperationTrigger();
  return proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Trigger.OperationTrigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setIndex(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Trigger.OperationTrigger} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Trigger.OperationTrigger.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.OperationTrigger.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Trigger.OperationTrigger.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = this.getIndex();
    if (f !== 0) {
      writer.writeInt64(2, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Trigger.OperationTrigger} The clone.
 */
proto.protocol.Trigger.OperationTrigger.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Trigger.OperationTrigger} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.Trigger.OperationTrigger.prototype.setHash = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.Trigger.OperationTrigger.prototype.setIndex = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnv = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.TransactionEnv.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.TransactionEnv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnv.displayName = "proto.protocol.TransactionEnv";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnv.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TransactionEnv.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.TransactionEnv.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TransactionEnv} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.TransactionEnv.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        transaction:
          (f = msg.getTransaction()) &&
          proto.protocol.Transaction.toObject(includeInstance, f),
        signaturesList: jspb.Message.toObjectList(
          msg.getSignaturesList(),
          common_pb.Signature.toObject,
          includeInstance,
        ),
        trigger:
          (f = msg.getTrigger()) &&
          proto.protocol.Trigger.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnv.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnv();
  return proto.protocol.TransactionEnv.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnv.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.Transaction();
        reader.readMessage(
          value,
          proto.protocol.Transaction.deserializeBinaryFromReader,
        );
        msg.setTransaction(value);
        break;
      case 2:
        var value = new common_pb.Signature();
        reader.readMessage(
          value,
          common_pb.Signature.deserializeBinaryFromReader,
        );
        msg.getSignaturesList().push(value);
        msg.setSignaturesList(msg.getSignaturesList());
        break;
      case 3:
        var value = new proto.protocol.Trigger();
        reader.readMessage(
          value,
          proto.protocol.Trigger.deserializeBinaryFromReader,
        );
        msg.setTrigger(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnv} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnv.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnv.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnv.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.Transaction.serializeBinaryToWriter,
    );
  }
  f = this.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Signature.serializeBinaryToWriter,
    );
  }
  f = this.getTrigger();
  if (f != null) {
    writer.writeMessage(3, f, proto.protocol.Trigger.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.TransactionEnv} The clone.
 */
proto.protocol.TransactionEnv.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.TransactionEnv} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional Transaction transaction = 1;
 * @return {proto.protocol.Transaction}
 */
proto.protocol.TransactionEnv.prototype.getTransaction = function () {
  return /** @type{proto.protocol.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Transaction, 1)
  );
};

/** @param {proto.protocol.Transaction|undefined} value  */
proto.protocol.TransactionEnv.prototype.setTransaction = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.TransactionEnv.prototype.clearTransaction = function () {
  this.setTransaction(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.TransactionEnv.prototype.hasTransaction = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated Signature signatures = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Signature>}
 */
proto.protocol.TransactionEnv.prototype.getSignaturesList = function () {
  return /** @type{!Array.<!proto.protocol.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Signature, 2)
  );
};

/** @param {Array.<!proto.protocol.Signature>} value  */
proto.protocol.TransactionEnv.prototype.setSignaturesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.TransactionEnv.prototype.clearSignaturesList = function () {
  this.setSignaturesList([]);
};

/**
 * optional Trigger trigger = 3;
 * @return {proto.protocol.Trigger}
 */
proto.protocol.TransactionEnv.prototype.getTrigger = function () {
  return /** @type{proto.protocol.Trigger} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Trigger, 3)
  );
};

/** @param {proto.protocol.Trigger|undefined} value  */
proto.protocol.TransactionEnv.prototype.setTrigger = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.TransactionEnv.prototype.clearTrigger = function () {
  this.setTrigger(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.TransactionEnv.prototype.hasTrigger = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnvStore = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.TransactionEnvStore.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.TransactionEnvStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnvStore.displayName =
    "proto.protocol.TransactionEnvStore";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnvStore.repeatedFields_ = [8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TransactionEnvStore.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.TransactionEnvStore.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TransactionEnvStore} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.TransactionEnvStore.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        transactionEnv:
          (f = msg.getTransactionEnv()) &&
          proto.protocol.TransactionEnv.toObject(includeInstance, f),
        errorCode: msg.getErrorCode(),
        errorDesc: msg.getErrorDesc(),
        ledgerSeq: msg.getLedgerSeq(),
        closeTime: msg.getCloseTime(),
        hash: msg.getHash_asB64(),
        actualFee: msg.getActualFee(),
        contractTxHashesList: msg.getContractTxHashesList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnvStore}
 */
proto.protocol.TransactionEnvStore.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnvStore();
  return proto.protocol.TransactionEnvStore.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnvStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnvStore}
 */
proto.protocol.TransactionEnvStore.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.TransactionEnv();
        reader.readMessage(
          value,
          proto.protocol.TransactionEnv.deserializeBinaryFromReader,
        );
        msg.setTransactionEnv(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setErrorCode(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorDesc(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setLedgerSeq(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setCloseTime(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setActualFee(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.getContractTxHashesList().push(value);
        msg.setContractTxHashesList(msg.getContractTxHashesList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnvStore} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvStore.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvStore.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvStore.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getTransactionEnv();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.protocol.TransactionEnv.serializeBinaryToWriter,
      );
    }
    f = this.getErrorCode();
    if (f !== 0) {
      writer.writeInt32(2, f);
    }
    f = this.getErrorDesc();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
    f = this.getLedgerSeq();
    if (f !== 0) {
      writer.writeInt64(4, f);
    }
    f = this.getCloseTime();
    if (f !== 0) {
      writer.writeInt64(5, f);
    }
    f = this.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(6, f);
    }
    f = this.getActualFee();
    if (f !== 0) {
      writer.writeInt64(7, f);
    }
    f = this.getContractTxHashesList_asU8();
    if (f.length > 0) {
      writer.writeRepeatedBytes(8, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.TransactionEnvStore} The clone.
 */
proto.protocol.TransactionEnvStore.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.TransactionEnvStore} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional TransactionEnv transaction_env = 1;
 * @return {proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnvStore.prototype.getTransactionEnv = function () {
  return /** @type{proto.protocol.TransactionEnv} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactionEnv, 1)
  );
};

/** @param {proto.protocol.TransactionEnv|undefined} value  */
proto.protocol.TransactionEnvStore.prototype.setTransactionEnv = function (
  value,
) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.TransactionEnvStore.prototype.clearTransactionEnv = function () {
  this.setTransactionEnv(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.TransactionEnvStore.prototype.hasTransactionEnv = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getErrorCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.TransactionEnvStore.prototype.setErrorCode = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string error_desc = 3;
 * @return {string}
 */
proto.protocol.TransactionEnvStore.prototype.getErrorDesc = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};

/** @param {string} value  */
proto.protocol.TransactionEnvStore.prototype.setErrorDesc = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional int64 ledger_seq = 4;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};

/** @param {number} value  */
proto.protocol.TransactionEnvStore.prototype.setLedgerSeq = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional int64 close_time = 5;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getCloseTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};

/** @param {number} value  */
proto.protocol.TransactionEnvStore.prototype.setCloseTime = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.TransactionEnvStore.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 6, "")
  );
};

/**
 * optional bytes hash = 6;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.TransactionEnvStore.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvStore.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.TransactionEnvStore.prototype.setHash = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional int64 actual_fee = 7;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getActualFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};

/** @param {number} value  */
proto.protocol.TransactionEnvStore.prototype.setActualFee = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protocol.TransactionEnvStore.prototype.getContractTxHashesList =
  function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (
      jspb.Message.getField(this, 8)
    );
  };

/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getContractTxHashesList()`
 * @return {!Array.<string>}
 */
proto.protocol.TransactionEnvStore.prototype.getContractTxHashesList_asB64 =
  function () {
    return /** @type {!Array.<string>} */ (
      jspb.Message.bytesListAsB64(this.getContractTxHashesList())
    );
  };

/**
 * repeated bytes contract_tx_hashes = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractTxHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.protocol.TransactionEnvStore.prototype.getContractTxHashesList_asU8 =
  function () {
    return /** @type {!Array.<!Uint8Array>} */ (
      jspb.Message.bytesListAsU8(this.getContractTxHashesList())
    );
  };

/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.protocol.TransactionEnvStore.prototype.setContractTxHashesList =
  function (value) {
    jspb.Message.setField(this, 8, value || []);
  };

proto.protocol.TransactionEnvStore.prototype.clearContractTxHashesList =
  function () {
    jspb.Message.setField(this, 8, []);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnvSet = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.TransactionEnvSet.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.TransactionEnvSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnvSet.displayName =
    "proto.protocol.TransactionEnvSet";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnvSet.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TransactionEnvSet.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.TransactionEnvSet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TransactionEnvSet} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.TransactionEnvSet.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txsList: jspb.Message.toObjectList(
          msg.getTxsList(),
          proto.protocol.TransactionEnv.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnvSet}
 */
proto.protocol.TransactionEnvSet.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnvSet();
  return proto.protocol.TransactionEnvSet.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnvSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnvSet}
 */
proto.protocol.TransactionEnvSet.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.protocol.TransactionEnv();
        reader.readMessage(
          value,
          proto.protocol.TransactionEnv.deserializeBinaryFromReader,
        );
        msg.getTxsList().push(value);
        msg.setTxsList(msg.getTxsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnvSet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvSet.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvSet.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.TransactionEnvSet.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.TransactionEnv.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.TransactionEnvSet} The clone.
 */
proto.protocol.TransactionEnvSet.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.TransactionEnvSet} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * repeated TransactionEnv txs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.TransactionEnv>}
 */
proto.protocol.TransactionEnvSet.prototype.getTxsList = function () {
  return /** @type{!Array.<!proto.protocol.TransactionEnv>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.TransactionEnv, 2)
  );
};

/** @param {Array.<!proto.protocol.TransactionEnv>} value  */
proto.protocol.TransactionEnvSet.prototype.setTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.TransactionEnvSet.prototype.clearTxsList = function () {
  this.setTxsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValueValidation = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.ConsensusValueValidation.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.ConsensusValueValidation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValueValidation.displayName =
    "proto.protocol.ConsensusValueValidation";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ConsensusValueValidation.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ConsensusValueValidation.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.ConsensusValueValidation.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ConsensusValueValidation} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.ConsensusValueValidation.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        expireTxIdsList: jspb.Message.getField(msg, 1),
        errorTxIdsList: jspb.Message.getField(msg, 2),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValueValidation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValueValidation();
  return proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValueValidation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
        msg.setExpireTxIdsList(value);
        break;
      case 2:
        var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
        msg.setErrorTxIdsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValueValidation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueValidation.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueValidation.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueValidation.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getExpireTxIdsList();
    if (f.length > 0) {
      writer.writePackedInt32(1, f);
    }
    f = this.getErrorTxIdsList();
    if (f.length > 0) {
      writer.writePackedInt32(2, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ConsensusValueValidation} The clone.
 */
proto.protocol.ConsensusValueValidation.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.ConsensusValueValidation} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * repeated int32 expire_tx_ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protocol.ConsensusValueValidation.prototype.getExpireTxIdsList =
  function () {
    return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
  };

/** @param {Array.<number>} value  */
proto.protocol.ConsensusValueValidation.prototype.setExpireTxIdsList =
  function (value) {
    jspb.Message.setField(this, 1, value || []);
  };

proto.protocol.ConsensusValueValidation.prototype.clearExpireTxIdsList =
  function () {
    jspb.Message.setField(this, 1, []);
  };

/**
 * repeated int32 error_tx_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protocol.ConsensusValueValidation.prototype.getErrorTxIdsList =
  function () {
    return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
  };

/** @param {Array.<number>} value  */
proto.protocol.ConsensusValueValidation.prototype.setErrorTxIdsList = function (
  value,
) {
  jspb.Message.setField(this, 2, value || []);
};

proto.protocol.ConsensusValueValidation.prototype.clearErrorTxIdsList =
  function () {
    jspb.Message.setField(this, 2, []);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.BenchSegmentRange = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.BenchSegmentRange.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.BenchSegmentRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.BenchSegmentRange.displayName =
    "proto.protocol.BenchSegmentRange";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.BenchSegmentRange.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.BenchSegmentRange.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.BenchSegmentRange.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.BenchSegmentRange} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.BenchSegmentRange.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        batchTxsSizeList: jspb.Message.getField(msg, 1),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.BenchSegmentRange}
 */
proto.protocol.BenchSegmentRange.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.BenchSegmentRange();
  return proto.protocol.BenchSegmentRange.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.BenchSegmentRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.BenchSegmentRange}
 */
proto.protocol.BenchSegmentRange.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
        msg.setBatchTxsSizeList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.BenchSegmentRange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.BenchSegmentRange.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.BenchSegmentRange.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.BenchSegmentRange.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getBatchTxsSizeList();
  if (f.length > 0) {
    writer.writePackedInt32(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.BenchSegmentRange} The clone.
 */
proto.protocol.BenchSegmentRange.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.BenchSegmentRange} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * repeated int32 batch_txs_size = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protocol.BenchSegmentRange.prototype.getBatchTxsSizeList = function () {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};

/** @param {Array.<number>} value  */
proto.protocol.BenchSegmentRange.prototype.setBatchTxsSizeList = function (
  value,
) {
  jspb.Message.setField(this, 1, value || []);
};

proto.protocol.BenchSegmentRange.prototype.clearBatchTxsSizeList = function () {
  jspb.Message.setField(this, 1, []);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Neighbor = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.Neighbor.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.Neighbor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Neighbor.displayName = "proto.protocol.Neighbor";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Neighbor.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Neighbor.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Neighbor.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Neighbor} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Neighbor.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        neighborsList: jspb.Message.getField(msg, 1),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Neighbor}
 */
proto.protocol.Neighbor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Neighbor();
  return proto.protocol.Neighbor.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Neighbor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Neighbor}
 */
proto.protocol.Neighbor.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
        msg.setNeighborsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Neighbor} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Neighbor.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Neighbor.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Neighbor.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNeighborsList();
  if (f.length > 0) {
    writer.writePackedInt32(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Neighbor} The clone.
 */
proto.protocol.Neighbor.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Neighbor} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * repeated int32 neighbors = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protocol.Neighbor.prototype.getNeighborsList = function () {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};

/** @param {Array.<number>} value  */
proto.protocol.Neighbor.prototype.setNeighborsList = function (value) {
  jspb.Message.setField(this, 1, value || []);
};

proto.protocol.Neighbor.prototype.clearNeighborsList = function () {
  jspb.Message.setField(this, 1, []);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DAG = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.DAG.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.DAG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DAG.displayName = "proto.protocol.DAG";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.DAG.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DAG.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.DAG.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DAG} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DAG.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        vertexesList: jspb.Message.toObjectList(
          msg.getVertexesList(),
          proto.protocol.Neighbor.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DAG}
 */
proto.protocol.DAG.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DAG();
  return proto.protocol.DAG.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DAG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DAG}
 */
proto.protocol.DAG.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.protocol.Neighbor();
        reader.readMessage(
          value,
          proto.protocol.Neighbor.deserializeBinaryFromReader,
        );
        msg.getVertexesList().push(value);
        msg.setVertexesList(msg.getVertexesList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DAG} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DAG.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DAG.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DAG.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVertexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Neighbor.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DAG} The clone.
 */
proto.protocol.DAG.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DAG} */ (jspb.Message.cloneMessage(this));
};

/**
 * repeated Neighbor vertexes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.Neighbor>}
 */
proto.protocol.DAG.prototype.getVertexesList = function () {
  return /** @type{!Array.<!proto.protocol.Neighbor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Neighbor, 2)
  );
};

/** @param {Array.<!proto.protocol.Neighbor>} value  */
proto.protocol.DAG.prototype.setVertexesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.DAG.prototype.clearVertexesList = function () {
  this.setVertexesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DomainTxsIndex = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DomainTxsIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DomainTxsIndex.displayName = "proto.protocol.DomainTxsIndex";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DomainTxsIndex.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.DomainTxsIndex.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DomainTxsIndex} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DomainTxsIndex.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        domainid: msg.getDomainid(),
        domaintxshash: msg.getDomaintxshash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DomainTxsIndex}
 */
proto.protocol.DomainTxsIndex.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DomainTxsIndex();
  return proto.protocol.DomainTxsIndex.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DomainTxsIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DomainTxsIndex}
 */
proto.protocol.DomainTxsIndex.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDomainid(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setDomaintxshash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DomainTxsIndex} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxsIndex.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DomainTxsIndex.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxsIndex.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getDomainid();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = this.getDomaintxshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DomainTxsIndex} The clone.
 */
proto.protocol.DomainTxsIndex.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DomainTxsIndex} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int32 domainId = 1;
 * @return {number}
 */
proto.protocol.DomainTxsIndex.prototype.getDomainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.DomainTxsIndex.prototype.setDomainid = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes domaintxshash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.DomainTxsIndex.prototype.getDomaintxshash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes domaintxshash = 2;
 * This is a type-conversion wrapper around `getDomaintxshash()`
 * @return {string}
 */
proto.protocol.DomainTxsIndex.prototype.getDomaintxshash_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getDomaintxshash())
  );
};

/**
 * optional bytes domaintxshash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDomaintxshash()`
 * @return {!Uint8Array}
 */
proto.protocol.DomainTxsIndex.prototype.getDomaintxshash_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getDomaintxshash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.DomainTxsIndex.prototype.setDomaintxshash = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DomainTxs = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.DomainTxs.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.DomainTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DomainTxs.displayName = "proto.protocol.DomainTxs";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.DomainTxs.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DomainTxs.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.DomainTxs.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DomainTxs} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DomainTxs.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        domainid: msg.getDomainid(),
        txs: msg.getTxs_asB64(),
        parallelConfig: msg.getParallelConfig(),
        benchSegmentRange:
          (f = msg.getBenchSegmentRange()) &&
          proto.protocol.BenchSegmentRange.toObject(includeInstance, f),
        validation:
          (f = msg.getValidation()) &&
          proto.protocol.ConsensusValueValidation.toObject(includeInstance, f),
        txlistList: msg.getTxlistList_asB64(),
        domainConfig: msg.getDomainConfig(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DomainTxs}
 */
proto.protocol.DomainTxs.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DomainTxs();
  return proto.protocol.DomainTxs.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DomainTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DomainTxs}
 */
proto.protocol.DomainTxs.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDomainid(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTxs(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setParallelConfig(value);
        break;
      case 4:
        var value = new proto.protocol.BenchSegmentRange();
        reader.readMessage(
          value,
          proto.protocol.BenchSegmentRange.deserializeBinaryFromReader,
        );
        msg.setBenchSegmentRange(value);
        break;
      case 5:
        var value = new proto.protocol.ConsensusValueValidation();
        reader.readMessage(
          value,
          proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader,
        );
        msg.setValidation(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.getTxlistList().push(value);
        msg.setTxlistList(msg.getTxlistList());
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setDomainConfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DomainTxs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxs.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DomainTxs.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDomainid();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = this.getTxs_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getParallelConfig();
  if (f) {
    writer.writeBool(3, f);
  }
  f = this.getBenchSegmentRange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.BenchSegmentRange.serializeBinaryToWriter,
    );
  }
  f = this.getValidation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protocol.ConsensusValueValidation.serializeBinaryToWriter,
    );
  }
  f = this.getTxlistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(6, f);
  }
  f = this.getDomainConfig();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DomainTxs} The clone.
 */
proto.protocol.DomainTxs.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DomainTxs} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int32 domainId = 1;
 * @return {number}
 */
proto.protocol.DomainTxs.prototype.getDomainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.DomainTxs.prototype.setDomainid = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes txs = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.DomainTxs.prototype.getTxs = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes txs = 2;
 * This is a type-conversion wrapper around `getTxs()`
 * @return {string}
 */
proto.protocol.DomainTxs.prototype.getTxs_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTxs()));
};

/**
 * optional bytes txs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxs()`
 * @return {!Uint8Array}
 */
proto.protocol.DomainTxs.prototype.getTxs_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTxs()));
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.DomainTxs.prototype.setTxs = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bool parallel_config = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.DomainTxs.prototype.getParallelConfig = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};

/** @param {boolean} value  */
proto.protocol.DomainTxs.prototype.setParallelConfig = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional BenchSegmentRange bench_segment_range = 4;
 * @return {proto.protocol.BenchSegmentRange}
 */
proto.protocol.DomainTxs.prototype.getBenchSegmentRange = function () {
  return /** @type{proto.protocol.BenchSegmentRange} */ (
    jspb.Message.getWrapperField(this, proto.protocol.BenchSegmentRange, 4)
  );
};

/** @param {proto.protocol.BenchSegmentRange|undefined} value  */
proto.protocol.DomainTxs.prototype.setBenchSegmentRange = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.protocol.DomainTxs.prototype.clearBenchSegmentRange = function () {
  this.setBenchSegmentRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainTxs.prototype.hasBenchSegmentRange = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional ConsensusValueValidation validation = 5;
 * @return {proto.protocol.ConsensusValueValidation}
 */
proto.protocol.DomainTxs.prototype.getValidation = function () {
  return /** @type{proto.protocol.ConsensusValueValidation} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.ConsensusValueValidation,
      5,
    )
  );
};

/** @param {proto.protocol.ConsensusValueValidation|undefined} value  */
proto.protocol.DomainTxs.prototype.setValidation = function (value) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.protocol.DomainTxs.prototype.clearValidation = function () {
  this.setValidation(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainTxs.prototype.hasValidation = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * repeated bytes txlist = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protocol.DomainTxs.prototype.getTxlistList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (
    jspb.Message.getField(this, 6)
  );
};

/**
 * repeated bytes txlist = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getTxlistList()`
 * @return {!Array.<string>}
 */
proto.protocol.DomainTxs.prototype.getTxlistList_asB64 = function () {
  return /** @type {!Array.<string>} */ (
    jspb.Message.bytesListAsB64(this.getTxlistList())
  );
};

/**
 * repeated bytes txlist = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxlistList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.protocol.DomainTxs.prototype.getTxlistList_asU8 = function () {
  return /** @type {!Array.<!Uint8Array>} */ (
    jspb.Message.bytesListAsU8(this.getTxlistList())
  );
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.protocol.DomainTxs.prototype.setTxlistList = function (value) {
  jspb.Message.setField(this, 6, value || []);
};

proto.protocol.DomainTxs.prototype.clearTxlistList = function () {
  jspb.Message.setField(this, 6, []);
};

/**
 * optional string domain_config = 7;
 * @return {string}
 */
proto.protocol.DomainTxs.prototype.getDomainConfig = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};

/** @param {string} value  */
proto.protocol.DomainTxs.prototype.setDomainConfig = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValueHeader = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.ConsensusValueHeader.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.ConsensusValueHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValueHeader.displayName =
    "proto.protocol.ConsensusValueHeader";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ConsensusValueHeader.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ConsensusValueHeader.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.ConsensusValueHeader.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ConsensusValueHeader} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.ConsensusValueHeader.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        closeTime: msg.getCloseTime(),
        previousProof: msg.getPreviousProof_asB64(),
        ledgerSeq: msg.getLedgerSeq(),
        previousLedgerHash: msg.getPreviousLedgerHash_asB64(),
        ledgerUpgrade:
          (f = msg.getLedgerUpgrade()) &&
          common_pb.LedgerUpgrade.toObject(includeInstance, f),
        txsIndexList: jspb.Message.toObjectList(
          msg.getTxsIndexList(),
          proto.protocol.DomainTxsIndex.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValueHeader}
 */
proto.protocol.ConsensusValueHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValueHeader();
  return proto.protocol.ConsensusValueHeader.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValueHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValueHeader}
 */
proto.protocol.ConsensusValueHeader.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setCloseTime(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPreviousProof(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setLedgerSeq(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPreviousLedgerHash(value);
        break;
      case 5:
        var value = new common_pb.LedgerUpgrade();
        reader.readMessage(
          value,
          common_pb.LedgerUpgrade.deserializeBinaryFromReader,
        );
        msg.setLedgerUpgrade(value);
        break;
      case 6:
        var value = new proto.protocol.DomainTxsIndex();
        reader.readMessage(
          value,
          proto.protocol.DomainTxsIndex.deserializeBinaryFromReader,
        );
        msg.getTxsIndexList().push(value);
        msg.setTxsIndexList(msg.getTxsIndexList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValueHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueHeader.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueHeader.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getCloseTime();
    if (f !== 0) {
      writer.writeInt64(1, f);
    }
    f = this.getPreviousProof_asU8();
    if (f.length > 0) {
      writer.writeBytes(2, f);
    }
    f = this.getLedgerSeq();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
    f = this.getPreviousLedgerHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(4, f);
    }
    f = this.getLedgerUpgrade();
    if (f != null) {
      writer.writeMessage(
        5,
        f,
        common_pb.LedgerUpgrade.serializeBinaryToWriter,
      );
    }
    f = this.getTxsIndexList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        6,
        f,
        proto.protocol.DomainTxsIndex.serializeBinaryToWriter,
      );
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ConsensusValueHeader} The clone.
 */
proto.protocol.ConsensusValueHeader.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.ConsensusValueHeader} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int64 close_time = 1;
 * @return {number}
 */
proto.protocol.ConsensusValueHeader.prototype.getCloseTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValueHeader.prototype.setCloseTime = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes previous_proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousProof = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes previous_proof = 2;
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {string}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousProof_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getPreviousProof())
    );
  };

/**
 * optional bytes previous_proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousProof_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getPreviousProof())
    );
  };

/** @param {!(string|Uint8Array)} value  */
proto.protocol.ConsensusValueHeader.prototype.setPreviousProof = function (
  value,
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 ledger_seq = 3;
 * @return {number}
 */
proto.protocol.ConsensusValueHeader.prototype.getLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValueHeader.prototype.setLedgerSeq = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes previous_ledger_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousLedgerHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldProto3(this, 4, "")
    );
  };

/**
 * optional bytes previous_ledger_hash = 4;
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {string}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousLedgerHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getPreviousLedgerHash())
    );
  };

/**
 * optional bytes previous_ledger_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueHeader.prototype.getPreviousLedgerHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getPreviousLedgerHash())
    );
  };

/** @param {!(string|Uint8Array)} value  */
proto.protocol.ConsensusValueHeader.prototype.setPreviousLedgerHash = function (
  value,
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional LedgerUpgrade ledger_upgrade = 5;
 * @return {proto.protocol.LedgerUpgrade}
 */
proto.protocol.ConsensusValueHeader.prototype.getLedgerUpgrade = function () {
  return /** @type{proto.protocol.LedgerUpgrade} */ (
    jspb.Message.getWrapperField(this, common_pb.LedgerUpgrade, 5)
  );
};

/** @param {proto.protocol.LedgerUpgrade|undefined} value  */
proto.protocol.ConsensusValueHeader.prototype.setLedgerUpgrade = function (
  value,
) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.protocol.ConsensusValueHeader.prototype.clearLedgerUpgrade = function () {
  this.setLedgerUpgrade(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValueHeader.prototype.hasLedgerUpgrade = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * repeated DomainTxsIndex txs_index = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.DomainTxsIndex>}
 */
proto.protocol.ConsensusValueHeader.prototype.getTxsIndexList = function () {
  return /** @type{!Array.<!proto.protocol.DomainTxsIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.DomainTxsIndex, 6)
  );
};

/** @param {Array.<!proto.protocol.DomainTxsIndex>} value  */
proto.protocol.ConsensusValueHeader.prototype.setTxsIndexList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

proto.protocol.ConsensusValueHeader.prototype.clearTxsIndexList = function () {
  this.setTxsIndexList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValueBody = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.ConsensusValueBody.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.ConsensusValueBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValueBody.displayName =
    "proto.protocol.ConsensusValueBody";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ConsensusValueBody.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ConsensusValueBody.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.ConsensusValueBody.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ConsensusValueBody} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.ConsensusValueBody.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txsListList: jspb.Message.toObjectList(
          msg.getTxsListList(),
          proto.protocol.DomainTxs.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValueBody}
 */
proto.protocol.ConsensusValueBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValueBody();
  return proto.protocol.ConsensusValueBody.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValueBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValueBody}
 */
proto.protocol.ConsensusValueBody.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.protocol.DomainTxs();
        reader.readMessage(
          value,
          proto.protocol.DomainTxs.deserializeBinaryFromReader,
        );
        msg.getTxsListList().push(value);
        msg.setTxsListList(msg.getTxsListList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValueBody} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueBody.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValueBody.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTxsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.DomainTxs.serializeBinaryToWriter,
    );
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ConsensusValueBody} The clone.
 */
proto.protocol.ConsensusValueBody.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.ConsensusValueBody} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * repeated DomainTxs txs_list = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.DomainTxs>}
 */
proto.protocol.ConsensusValueBody.prototype.getTxsListList = function () {
  return /** @type{!Array.<!proto.protocol.DomainTxs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.DomainTxs, 2)
  );
};

/** @param {Array.<!proto.protocol.DomainTxs>} value  */
proto.protocol.ConsensusValueBody.prototype.setTxsListList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

proto.protocol.ConsensusValueBody.prototype.clearTxsListList = function () {
  this.setTxsListList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DomainTxCount = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DomainTxCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DomainTxCount.displayName = "proto.protocol.DomainTxCount";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DomainTxCount.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.DomainTxCount.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DomainTxCount} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DomainTxCount.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        domainId: msg.getDomainId(),
        txCount: msg.getTxCount(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DomainTxCount}
 */
proto.protocol.DomainTxCount.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DomainTxCount();
  return proto.protocol.DomainTxCount.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DomainTxCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DomainTxCount}
 */
proto.protocol.DomainTxCount.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDomainId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTxCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DomainTxCount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxCount.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DomainTxCount.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainTxCount.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getDomainId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = this.getTxCount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DomainTxCount} The clone.
 */
proto.protocol.DomainTxCount.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DomainTxCount} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int32 domain_id = 1;
 * @return {number}
 */
proto.protocol.DomainTxCount.prototype.getDomainId = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};

/** @param {number} value  */
proto.protocol.DomainTxCount.prototype.setDomainId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 tx_count = 2;
 * @return {number}
 */
proto.protocol.DomainTxCount.prototype.getTxCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.DomainTxCount.prototype.setTxCount = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValue = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.ConsensusValue.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.ConsensusValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValue.displayName = "proto.protocol.ConsensusValue";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ConsensusValue.repeatedFields_ = [12, 13];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ConsensusValue.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.ConsensusValue.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ConsensusValue} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.ConsensusValue.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txset:
          (f = msg.getTxset()) &&
          proto.protocol.TransactionEnvSet.toObject(includeInstance, f),
        closeTime: msg.getCloseTime(),
        previousProof: msg.getPreviousProof_asB64(),
        ledgerSeq: msg.getLedgerSeq(),
        previousLedgerHash: msg.getPreviousLedgerHash_asB64(),
        ledgerUpgrade:
          (f = msg.getLedgerUpgrade()) &&
          common_pb.LedgerUpgrade.toObject(includeInstance, f),
        validation:
          (f = msg.getValidation()) &&
          proto.protocol.ConsensusValueValidation.toObject(includeInstance, f),
        txs: msg.getTxs_asB64(),
        consensusVersion: msg.getConsensusVersion(),
        consensusHeader:
          (f = msg.getConsensusHeader()) &&
          proto.protocol.ConsensusValueHeader.toObject(includeInstance, f),
        consensusBody:
          (f = msg.getConsensusBody()) &&
          proto.protocol.ConsensusValueBody.toObject(includeInstance, f),
        domainAccounttrieHashsList: jspb.Message.toObjectList(
          msg.getDomainAccounttrieHashsList(),
          proto.protocol.DomainAccountHash.toObject,
          includeInstance,
        ),
        domainTxCountList: jspb.Message.toObjectList(
          msg.getDomainTxCountList(),
          proto.protocol.DomainTxCount.toObject,
          includeInstance,
        ),
        consensusType: msg.getConsensusType(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValue}
 */
proto.protocol.ConsensusValue.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValue();
  return proto.protocol.ConsensusValue.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValue}
 */
proto.protocol.ConsensusValue.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.protocol.TransactionEnvSet();
        reader.readMessage(
          value,
          proto.protocol.TransactionEnvSet.deserializeBinaryFromReader,
        );
        msg.setTxset(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setCloseTime(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPreviousProof(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setLedgerSeq(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPreviousLedgerHash(value);
        break;
      case 6:
        var value = new common_pb.LedgerUpgrade();
        reader.readMessage(
          value,
          common_pb.LedgerUpgrade.deserializeBinaryFromReader,
        );
        msg.setLedgerUpgrade(value);
        break;
      case 7:
        var value = new proto.protocol.ConsensusValueValidation();
        reader.readMessage(
          value,
          proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader,
        );
        msg.setValidation(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTxs(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setConsensusVersion(value);
        break;
      case 10:
        var value = new proto.protocol.ConsensusValueHeader();
        reader.readMessage(
          value,
          proto.protocol.ConsensusValueHeader.deserializeBinaryFromReader,
        );
        msg.setConsensusHeader(value);
        break;
      case 11:
        var value = new proto.protocol.ConsensusValueBody();
        reader.readMessage(
          value,
          proto.protocol.ConsensusValueBody.deserializeBinaryFromReader,
        );
        msg.setConsensusBody(value);
        break;
      case 12:
        var value = new proto.protocol.DomainAccountHash();
        reader.readMessage(
          value,
          proto.protocol.DomainAccountHash.deserializeBinaryFromReader,
        );
        msg.getDomainAccounttrieHashsList().push(value);
        msg.setDomainAccounttrieHashsList(msg.getDomainAccounttrieHashsList());
        break;
      case 13:
        var value = new proto.protocol.DomainTxCount();
        reader.readMessage(
          value,
          proto.protocol.DomainTxCount.deserializeBinaryFromReader,
        );
        msg.getDomainTxCountList().push(value);
        msg.setDomainTxCountList(msg.getDomainTxCountList());
        break;
      case 14:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setConsensusType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValue.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.ConsensusValue.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getTxset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.TransactionEnvSet.serializeBinaryToWriter,
    );
  }
  f = this.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = this.getPreviousProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = this.getPreviousLedgerHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = this.getLedgerUpgrade();
  if (f != null) {
    writer.writeMessage(6, f, common_pb.LedgerUpgrade.serializeBinaryToWriter);
  }
  f = this.getValidation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.ConsensusValueValidation.serializeBinaryToWriter,
    );
  }
  f = this.getTxs_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = this.getConsensusVersion();
  if (f !== 0) {
    writer.writeInt32(9, f);
  }
  f = this.getConsensusHeader();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.protocol.ConsensusValueHeader.serializeBinaryToWriter,
    );
  }
  f = this.getConsensusBody();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.protocol.ConsensusValueBody.serializeBinaryToWriter,
    );
  }
  f = this.getDomainAccounttrieHashsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.protocol.DomainAccountHash.serializeBinaryToWriter,
    );
  }
  f = this.getDomainTxCountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.protocol.DomainTxCount.serializeBinaryToWriter,
    );
  }
  f = this.getConsensusType();
  if (f !== 0) {
    writer.writeInt32(14, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.ConsensusValue} The clone.
 */
proto.protocol.ConsensusValue.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.ConsensusValue} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional TransactionEnvSet txset = 1;
 * @return {proto.protocol.TransactionEnvSet}
 */
proto.protocol.ConsensusValue.prototype.getTxset = function () {
  return /** @type{proto.protocol.TransactionEnvSet} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactionEnvSet, 1)
  );
};

/** @param {proto.protocol.TransactionEnvSet|undefined} value  */
proto.protocol.ConsensusValue.prototype.setTxset = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.ConsensusValue.prototype.clearTxset = function () {
  this.setTxset(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasTxset = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 close_time = 2;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getCloseTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValue.prototype.setCloseTime = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes previous_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes previous_proof = 3;
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {string}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getPreviousProof())
  );
};

/**
 * optional bytes previous_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getPreviousProof())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.ConsensusValue.prototype.setPreviousProof = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional int64 ledger_seq = 4;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getLedgerSeq = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValue.prototype.setLedgerSeq = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bytes previous_ledger_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes previous_ledger_hash = 5;
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {string}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getPreviousLedgerHash())
    );
  };

/**
 * optional bytes previous_ledger_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getPreviousLedgerHash())
    );
  };

/** @param {!(string|Uint8Array)} value  */
proto.protocol.ConsensusValue.prototype.setPreviousLedgerHash = function (
  value,
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional LedgerUpgrade ledger_upgrade = 6;
 * @return {proto.protocol.LedgerUpgrade}
 */
proto.protocol.ConsensusValue.prototype.getLedgerUpgrade = function () {
  return /** @type{proto.protocol.LedgerUpgrade} */ (
    jspb.Message.getWrapperField(this, common_pb.LedgerUpgrade, 6)
  );
};

/** @param {proto.protocol.LedgerUpgrade|undefined} value  */
proto.protocol.ConsensusValue.prototype.setLedgerUpgrade = function (value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.protocol.ConsensusValue.prototype.clearLedgerUpgrade = function () {
  this.setLedgerUpgrade(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasLedgerUpgrade = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional ConsensusValueValidation validation = 7;
 * @return {proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValue.prototype.getValidation = function () {
  return /** @type{proto.protocol.ConsensusValueValidation} */ (
    jspb.Message.getWrapperField(
      this,
      proto.protocol.ConsensusValueValidation,
      7,
    )
  );
};

/** @param {proto.protocol.ConsensusValueValidation|undefined} value  */
proto.protocol.ConsensusValue.prototype.setValidation = function (value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.protocol.ConsensusValue.prototype.clearValidation = function () {
  this.setValidation(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasValidation = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional bytes txs = 8;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValue.prototype.getTxs = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldProto3(this, 8, "")
  );
};

/**
 * optional bytes txs = 8;
 * This is a type-conversion wrapper around `getTxs()`
 * @return {string}
 */
proto.protocol.ConsensusValue.prototype.getTxs_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTxs()));
};

/**
 * optional bytes txs = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxs()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.getTxs_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTxs()));
};

/** @param {!(string|Uint8Array)} value  */
proto.protocol.ConsensusValue.prototype.setTxs = function (value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional int32 consensus_version = 9;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getConsensusVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValue.prototype.setConsensusVersion = function (value) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional ConsensusValueHeader consensus_header = 10;
 * @return {proto.protocol.ConsensusValueHeader}
 */
proto.protocol.ConsensusValue.prototype.getConsensusHeader = function () {
  return /** @type{proto.protocol.ConsensusValueHeader} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ConsensusValueHeader, 10)
  );
};

/** @param {proto.protocol.ConsensusValueHeader|undefined} value  */
proto.protocol.ConsensusValue.prototype.setConsensusHeader = function (value) {
  jspb.Message.setWrapperField(this, 10, value);
};

proto.protocol.ConsensusValue.prototype.clearConsensusHeader = function () {
  this.setConsensusHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasConsensusHeader = function () {
  return jspb.Message.getField(this, 10) != null;
};

/**
 * optional ConsensusValueBody consensus_body = 11;
 * @return {proto.protocol.ConsensusValueBody}
 */
proto.protocol.ConsensusValue.prototype.getConsensusBody = function () {
  return /** @type{proto.protocol.ConsensusValueBody} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ConsensusValueBody, 11)
  );
};

/** @param {proto.protocol.ConsensusValueBody|undefined} value  */
proto.protocol.ConsensusValue.prototype.setConsensusBody = function (value) {
  jspb.Message.setWrapperField(this, 11, value);
};

proto.protocol.ConsensusValue.prototype.clearConsensusBody = function () {
  this.setConsensusBody(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasConsensusBody = function () {
  return jspb.Message.getField(this, 11) != null;
};

/**
 * repeated DomainAccountHash domain_accounttrie_hashs = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.DomainAccountHash>}
 */
proto.protocol.ConsensusValue.prototype.getDomainAccounttrieHashsList =
  function () {
    return /** @type{!Array.<!proto.protocol.DomainAccountHash>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.protocol.DomainAccountHash,
        12,
      )
    );
  };

/** @param {Array.<!proto.protocol.DomainAccountHash>} value  */
proto.protocol.ConsensusValue.prototype.setDomainAccounttrieHashsList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 12, value);
  };

proto.protocol.ConsensusValue.prototype.clearDomainAccounttrieHashsList =
  function () {
    this.setDomainAccounttrieHashsList([]);
  };

/**
 * repeated DomainTxCount domain_tx_count = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.DomainTxCount>}
 */
proto.protocol.ConsensusValue.prototype.getDomainTxCountList = function () {
  return /** @type{!Array.<!proto.protocol.DomainTxCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.DomainTxCount, 13)
  );
};

/** @param {Array.<!proto.protocol.DomainTxCount>} value  */
proto.protocol.ConsensusValue.prototype.setDomainTxCountList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};

proto.protocol.ConsensusValue.prototype.clearDomainTxCountList = function () {
  this.setDomainTxCountList([]);
};

/**
 * optional int32 consensus_type = 14;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getConsensusType = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};

/** @param {number} value  */
proto.protocol.ConsensusValue.prototype.setConsensusType = function (value) {
  jspb.Message.setField(this, 14, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DomainConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DomainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DomainConfig.displayName = "proto.protocol.DomainConfig";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.DomainConfig.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.DomainConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.DomainConfig} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.DomainConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        leaderShift:
          (f = msg.getLeaderShift()) &&
          common_pb.BoolValue.toObject(includeInstance, f),
        closeInterval:
          (f = msg.getCloseInterval()) &&
          common_pb.Int32Value.toObject(includeInstance, f),
        maxTransPerLedger:
          (f = msg.getMaxTransPerLedger()) &&
          common_pb.Int32Value.toObject(includeInstance, f),
        ledgerVersion:
          (f = msg.getLedgerVersion()) &&
          common_pb.Int32Value.toObject(includeInstance, f),
        parallel:
          (f = msg.getParallel()) &&
          common_pb.BoolValue.toObject(includeInstance, f),
        dirCreateContract:
          (f = msg.getDirCreateContract()) &&
          common_pb.BoolValue.toObject(includeInstance, f),
        validators:
          (f = msg.getValidators()) &&
          common_pb.StringValue.toObject(includeInstance, f),
        fee:
          (f = msg.getFee()) &&
          common_pb.StringValue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DomainConfig}
 */
proto.protocol.DomainConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DomainConfig();
  return proto.protocol.DomainConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DomainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DomainConfig}
 */
proto.protocol.DomainConfig.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new common_pb.BoolValue();
        reader.readMessage(
          value,
          common_pb.BoolValue.deserializeBinaryFromReader,
        );
        msg.setLeaderShift(value);
        break;
      case 2:
        var value = new common_pb.Int32Value();
        reader.readMessage(
          value,
          common_pb.Int32Value.deserializeBinaryFromReader,
        );
        msg.setCloseInterval(value);
        break;
      case 3:
        var value = new common_pb.Int32Value();
        reader.readMessage(
          value,
          common_pb.Int32Value.deserializeBinaryFromReader,
        );
        msg.setMaxTransPerLedger(value);
        break;
      case 4:
        var value = new common_pb.Int32Value();
        reader.readMessage(
          value,
          common_pb.Int32Value.deserializeBinaryFromReader,
        );
        msg.setLedgerVersion(value);
        break;
      case 5:
        var value = new common_pb.BoolValue();
        reader.readMessage(
          value,
          common_pb.BoolValue.deserializeBinaryFromReader,
        );
        msg.setParallel(value);
        break;
      case 6:
        var value = new common_pb.BoolValue();
        reader.readMessage(
          value,
          common_pb.BoolValue.deserializeBinaryFromReader,
        );
        msg.setDirCreateContract(value);
        break;
      case 7:
        var value = new common_pb.StringValue();
        reader.readMessage(
          value,
          common_pb.StringValue.deserializeBinaryFromReader,
        );
        msg.setValidators(value);
        break;
      case 8:
        var value = new common_pb.StringValue();
        reader.readMessage(
          value,
          common_pb.StringValue.deserializeBinaryFromReader,
        );
        msg.setFee(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DomainConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainConfig.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DomainConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.DomainConfig.prototype.serializeBinaryToWriter = function (
  writer,
) {
  var f = undefined;
  f = this.getLeaderShift();
  if (f != null) {
    writer.writeMessage(1, f, common_pb.BoolValue.serializeBinaryToWriter);
  }
  f = this.getCloseInterval();
  if (f != null) {
    writer.writeMessage(2, f, common_pb.Int32Value.serializeBinaryToWriter);
  }
  f = this.getMaxTransPerLedger();
  if (f != null) {
    writer.writeMessage(3, f, common_pb.Int32Value.serializeBinaryToWriter);
  }
  f = this.getLedgerVersion();
  if (f != null) {
    writer.writeMessage(4, f, common_pb.Int32Value.serializeBinaryToWriter);
  }
  f = this.getParallel();
  if (f != null) {
    writer.writeMessage(5, f, common_pb.BoolValue.serializeBinaryToWriter);
  }
  f = this.getDirCreateContract();
  if (f != null) {
    writer.writeMessage(6, f, common_pb.BoolValue.serializeBinaryToWriter);
  }
  f = this.getValidators();
  if (f != null) {
    writer.writeMessage(7, f, common_pb.StringValue.serializeBinaryToWriter);
  }
  f = this.getFee();
  if (f != null) {
    writer.writeMessage(8, f, common_pb.StringValue.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.DomainConfig} The clone.
 */
proto.protocol.DomainConfig.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.DomainConfig} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional BoolValue leader_shift = 1;
 * @return {proto.protocol.BoolValue}
 */
proto.protocol.DomainConfig.prototype.getLeaderShift = function () {
  return /** @type{proto.protocol.BoolValue} */ (
    jspb.Message.getWrapperField(this, common_pb.BoolValue, 1)
  );
};

/** @param {proto.protocol.BoolValue|undefined} value  */
proto.protocol.DomainConfig.prototype.setLeaderShift = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.protocol.DomainConfig.prototype.clearLeaderShift = function () {
  this.setLeaderShift(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasLeaderShift = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Int32Value close_interval = 2;
 * @return {proto.protocol.Int32Value}
 */
proto.protocol.DomainConfig.prototype.getCloseInterval = function () {
  return /** @type{proto.protocol.Int32Value} */ (
    jspb.Message.getWrapperField(this, common_pb.Int32Value, 2)
  );
};

/** @param {proto.protocol.Int32Value|undefined} value  */
proto.protocol.DomainConfig.prototype.setCloseInterval = function (value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.protocol.DomainConfig.prototype.clearCloseInterval = function () {
  this.setCloseInterval(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasCloseInterval = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Int32Value max_trans_per_ledger = 3;
 * @return {proto.protocol.Int32Value}
 */
proto.protocol.DomainConfig.prototype.getMaxTransPerLedger = function () {
  return /** @type{proto.protocol.Int32Value} */ (
    jspb.Message.getWrapperField(this, common_pb.Int32Value, 3)
  );
};

/** @param {proto.protocol.Int32Value|undefined} value  */
proto.protocol.DomainConfig.prototype.setMaxTransPerLedger = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.DomainConfig.prototype.clearMaxTransPerLedger = function () {
  this.setMaxTransPerLedger(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasMaxTransPerLedger = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Int32Value ledger_version = 4;
 * @return {proto.protocol.Int32Value}
 */
proto.protocol.DomainConfig.prototype.getLedgerVersion = function () {
  return /** @type{proto.protocol.Int32Value} */ (
    jspb.Message.getWrapperField(this, common_pb.Int32Value, 4)
  );
};

/** @param {proto.protocol.Int32Value|undefined} value  */
proto.protocol.DomainConfig.prototype.setLedgerVersion = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.protocol.DomainConfig.prototype.clearLedgerVersion = function () {
  this.setLedgerVersion(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasLedgerVersion = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional BoolValue parallel = 5;
 * @return {proto.protocol.BoolValue}
 */
proto.protocol.DomainConfig.prototype.getParallel = function () {
  return /** @type{proto.protocol.BoolValue} */ (
    jspb.Message.getWrapperField(this, common_pb.BoolValue, 5)
  );
};

/** @param {proto.protocol.BoolValue|undefined} value  */
proto.protocol.DomainConfig.prototype.setParallel = function (value) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.protocol.DomainConfig.prototype.clearParallel = function () {
  this.setParallel(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasParallel = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional BoolValue dir_create_contract = 6;
 * @return {proto.protocol.BoolValue}
 */
proto.protocol.DomainConfig.prototype.getDirCreateContract = function () {
  return /** @type{proto.protocol.BoolValue} */ (
    jspb.Message.getWrapperField(this, common_pb.BoolValue, 6)
  );
};

/** @param {proto.protocol.BoolValue|undefined} value  */
proto.protocol.DomainConfig.prototype.setDirCreateContract = function (value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.protocol.DomainConfig.prototype.clearDirCreateContract = function () {
  this.setDirCreateContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasDirCreateContract = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional StringValue validators = 7;
 * @return {proto.protocol.StringValue}
 */
proto.protocol.DomainConfig.prototype.getValidators = function () {
  return /** @type{proto.protocol.StringValue} */ (
    jspb.Message.getWrapperField(this, common_pb.StringValue, 7)
  );
};

/** @param {proto.protocol.StringValue|undefined} value  */
proto.protocol.DomainConfig.prototype.setValidators = function (value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.protocol.DomainConfig.prototype.clearValidators = function () {
  this.setValidators(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasValidators = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional StringValue fee = 8;
 * @return {proto.protocol.StringValue}
 */
proto.protocol.DomainConfig.prototype.getFee = function () {
  return /** @type{proto.protocol.StringValue} */ (
    jspb.Message.getWrapperField(this, common_pb.StringValue, 8)
  );
};

/** @param {proto.protocol.StringValue|undefined} value  */
proto.protocol.DomainConfig.prototype.setFee = function (value) {
  jspb.Message.setWrapperField(this, 8, value);
};

proto.protocol.DomainConfig.prototype.clearFee = function () {
  this.setFee(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.DomainConfig.prototype.hasFee = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Contract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Contract.displayName = "proto.protocol.Contract";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.Contract.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.Contract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.Contract} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.Contract.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: msg.getType(),
        payload: msg.getPayload(),
        version: msg.getVersion(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Contract}
 */
proto.protocol.Contract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Contract();
  return proto.protocol.Contract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Contract}
 */
proto.protocol.Contract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.protocol.Contract.ContractType} */ (
          reader.readEnum()
        );
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPayload(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Contract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Contract.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Contract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.Contract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = this.getPayload();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = this.getVersion();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.Contract} The clone.
 */
proto.protocol.Contract.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.Contract} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional ContractType type = 1;
 * @return {!proto.protocol.Contract.ContractType}
 */
proto.protocol.Contract.prototype.getType = function () {
  return /** @type {!proto.protocol.Contract.ContractType} */ (
    jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {!proto.protocol.Contract.ContractType} value  */
proto.protocol.Contract.prototype.setType = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string payload = 2;
 * @return {string}
 */
proto.protocol.Contract.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};

/** @param {string} value  */
proto.protocol.Contract.prototype.setPayload = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 version = 3;
 * @return {number}
 */
proto.protocol.Contract.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};

/** @param {number} value  */
proto.protocol.Contract.prototype.setVersion = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * @enum {number}
 */
proto.protocol.Contract.ContractType = {
  JAVASCRIPT: 0,
  EVM: 1,
  SYSTEM: 2,
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationCreateAccount = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationCreateAccount.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationCreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationCreateAccount.displayName =
    "proto.protocol.OperationCreateAccount";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationCreateAccount.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationCreateAccount.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationCreateAccount.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationCreateAccount} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationCreateAccount.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        destAddress: msg.getDestAddress(),
        contract:
          (f = msg.getContract()) &&
          proto.protocol.Contract.toObject(includeInstance, f),
        priv:
          (f = msg.getPriv()) &&
          proto.protocol.AccountPrivilege.toObject(includeInstance, f),
        metadatasList: jspb.Message.toObjectList(
          msg.getMetadatasList(),
          common_pb.KeyPair.toObject,
          includeInstance,
        ),
        initBalance: msg.getInitBalance(),
        initInput: msg.getInitInput(),
        destPublicKey: msg.getDestPublicKey(),
        rawDestAddress: msg.getRawDestAddress_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationCreateAccount}
 */
proto.protocol.OperationCreateAccount.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationCreateAccount();
  return proto.protocol.OperationCreateAccount.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationCreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationCreateAccount}
 */
proto.protocol.OperationCreateAccount.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDestAddress(value);
        break;
      case 2:
        var value = new proto.protocol.Contract();
        reader.readMessage(
          value,
          proto.protocol.Contract.deserializeBinaryFromReader,
        );
        msg.setContract(value);
        break;
      case 3:
        var value = new proto.protocol.AccountPrivilege();
        reader.readMessage(
          value,
          proto.protocol.AccountPrivilege.deserializeBinaryFromReader,
        );
        msg.setPriv(value);
        break;
      case 4:
        var value = new common_pb.KeyPair();
        reader.readMessage(
          value,
          common_pb.KeyPair.deserializeBinaryFromReader,
        );
        msg.getMetadatasList().push(value);
        msg.setMetadatasList(msg.getMetadatasList());
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setInitBalance(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setInitInput(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setDestPublicKey(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRawDestAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationCreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationCreateAccount.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationCreateAccount.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationCreateAccount.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getDestAddress();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getContract();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        proto.protocol.Contract.serializeBinaryToWriter,
      );
    }
    f = this.getPriv();
    if (f != null) {
      writer.writeMessage(
        3,
        f,
        proto.protocol.AccountPrivilege.serializeBinaryToWriter,
      );
    }
    f = this.getMetadatasList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        4,
        f,
        common_pb.KeyPair.serializeBinaryToWriter,
      );
    }
    f = this.getInitBalance();
    if (f !== 0) {
      writer.writeInt64(5, f);
    }
    f = this.getInitInput();
    if (f.length > 0) {
      writer.writeString(6, f);
    }
    f = this.getDestPublicKey();
    if (f.length > 0) {
      writer.writeString(7, f);
    }
    f = this.getRawDestAddress_asU8();
    if (f.length > 0) {
      writer.writeBytes(8, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationCreateAccount} The clone.
 */
proto.protocol.OperationCreateAccount.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationCreateAccount} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getDestAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationCreateAccount.prototype.setDestAddress = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional Contract contract = 2;
 * @return {proto.protocol.Contract}
 */
proto.protocol.OperationCreateAccount.prototype.getContract = function () {
  return /** @type{proto.protocol.Contract} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Contract, 2)
  );
};

/** @param {proto.protocol.Contract|undefined} value  */
proto.protocol.OperationCreateAccount.prototype.setContract = function (value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.protocol.OperationCreateAccount.prototype.clearContract = function () {
  this.setContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.OperationCreateAccount.prototype.hasContract = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional AccountPrivilege priv = 3;
 * @return {proto.protocol.AccountPrivilege}
 */
proto.protocol.OperationCreateAccount.prototype.getPriv = function () {
  return /** @type{proto.protocol.AccountPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountPrivilege, 3)
  );
};

/** @param {proto.protocol.AccountPrivilege|undefined} value  */
proto.protocol.OperationCreateAccount.prototype.setPriv = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.protocol.OperationCreateAccount.prototype.clearPriv = function () {
  this.setPriv(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.protocol.OperationCreateAccount.prototype.hasPriv = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated KeyPair metadatas = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.KeyPair>}
 */
proto.protocol.OperationCreateAccount.prototype.getMetadatasList = function () {
  return /** @type{!Array.<!proto.protocol.KeyPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.KeyPair, 4)
  );
};

/** @param {Array.<!proto.protocol.KeyPair>} value  */
proto.protocol.OperationCreateAccount.prototype.setMetadatasList = function (
  value,
) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

proto.protocol.OperationCreateAccount.prototype.clearMetadatasList =
  function () {
    this.setMetadatasList([]);
  };

/**
 * optional int64 init_balance = 5;
 * @return {number}
 */
proto.protocol.OperationCreateAccount.prototype.getInitBalance = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};

/** @param {number} value  */
proto.protocol.OperationCreateAccount.prototype.setInitBalance = function (
  value,
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional string init_input = 6;
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getInitInput = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};

/** @param {string} value  */
proto.protocol.OperationCreateAccount.prototype.setInitInput = function (
  value,
) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional string dest_public_key = 7;
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getDestPublicKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};

/** @param {string} value  */
proto.protocol.OperationCreateAccount.prototype.setDestPublicKey = function (
  value,
) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional bytes raw_dest_address = 8;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.OperationCreateAccount.prototype.getRawDestAddress =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldProto3(this, 8, "")
    );
  };

/**
 * optional bytes raw_dest_address = 8;
 * This is a type-conversion wrapper around `getRawDestAddress()`
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getRawDestAddress_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getRawDestAddress())
    );
  };

/**
 * optional bytes raw_dest_address = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawDestAddress()`
 * @return {!Uint8Array}
 */
proto.protocol.OperationCreateAccount.prototype.getRawDestAddress_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getRawDestAddress())
    );
  };

/** @param {!(string|Uint8Array)} value  */
proto.protocol.OperationCreateAccount.prototype.setRawDestAddress = function (
  value,
) {
  jspb.Message.setField(this, 8, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetMetadata = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationSetMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetMetadata.displayName =
    "proto.protocol.OperationSetMetadata";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationSetMetadata.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationSetMetadata.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationSetMetadata} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationSetMetadata.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        key: msg.getKey(),
        value: msg.getValue(),
        version: msg.getVersion(),
        deleteFlag: msg.getDeleteFlag(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetMetadata}
 */
proto.protocol.OperationSetMetadata.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetMetadata();
  return proto.protocol.OperationSetMetadata.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetMetadata}
 */
proto.protocol.OperationSetMetadata.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setVersion(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setDeleteFlag(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetMetadata.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetMetadata.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetMetadata.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getKey();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getValue();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = this.getVersion();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
    f = this.getDeleteFlag();
    if (f) {
      writer.writeBool(4, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationSetMetadata} The clone.
 */
proto.protocol.OperationSetMetadata.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationSetMetadata} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.protocol.OperationSetMetadata.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationSetMetadata.prototype.setKey = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.protocol.OperationSetMetadata.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};

/** @param {string} value  */
proto.protocol.OperationSetMetadata.prototype.setValue = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 version = 3;
 * @return {number}
 */
proto.protocol.OperationSetMetadata.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};

/** @param {number} value  */
proto.protocol.OperationSetMetadata.prototype.setVersion = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bool delete_flag = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.OperationSetMetadata.prototype.getDeleteFlag = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};

/** @param {boolean} value  */
proto.protocol.OperationSetMetadata.prototype.setDeleteFlag = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationUpgradeContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationUpgradeContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationUpgradeContract.displayName =
    "proto.protocol.OperationUpgradeContract";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationUpgradeContract.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationUpgradeContract.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationUpgradeContract} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationUpgradeContract.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        destAddress: msg.getDestAddress(),
        payload: msg.getPayload(),
        type: msg.getType(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationUpgradeContract}
 */
proto.protocol.OperationUpgradeContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationUpgradeContract();
  return proto.protocol.OperationUpgradeContract.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationUpgradeContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationUpgradeContract}
 */
proto.protocol.OperationUpgradeContract.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDestAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPayload(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationUpgradeContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationUpgradeContract.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationUpgradeContract.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationUpgradeContract.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getDestAddress();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getPayload();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = this.getType();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationUpgradeContract} The clone.
 */
proto.protocol.OperationUpgradeContract.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationUpgradeContract} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationUpgradeContract.prototype.getDestAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};

/** @param {string} value  */
proto.protocol.OperationUpgradeContract.prototype.setDestAddress = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string payload = 2;
 * @return {string}
 */
proto.protocol.OperationUpgradeContract.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};

/** @param {string} value  */
proto.protocol.OperationUpgradeContract.prototype.setPayload = function (
  value,
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 type = 3;
 * @return {number}
 */
proto.protocol.OperationUpgradeContract.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};

/** @param {number} value  */
proto.protocol.OperationUpgradeContract.prototype.setType = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetControlledArea = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.OperationSetControlledArea.repeatedFields_,
    null,
  );
};
goog.inherits(proto.protocol.OperationSetControlledArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetControlledArea.displayName =
    "proto.protocol.OperationSetControlledArea";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetControlledArea.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.OperationSetControlledArea.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protocol.OperationSetControlledArea.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.OperationSetControlledArea} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.protocol.OperationSetControlledArea.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        destAddress: msg.getDestAddress(),
        sTrusted: msg.getSTrusted(),
        sStatus: msg.getSStatus(),
        trusted: msg.getTrusted(),
        status: msg.getStatus(),
        attributesList: jspb.Message.toObjectList(
          msg.getAttributesList(),
          common_pb.KeyPair.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetControlledArea}
 */
proto.protocol.OperationSetControlledArea.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetControlledArea();
  return proto.protocol.OperationSetControlledArea.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetControlledArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetControlledArea}
 */
proto.protocol.OperationSetControlledArea.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setDestAddress(value);
          break;
        case 2:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSTrusted(value);
          break;
        case 3:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSStatus(value);
          break;
        case 4:
          var value = /** @type {!proto.protocol.ControlledArea.TRUST_FLAG} */ (
            reader.readEnum()
          );
          msg.setTrusted(value);
          break;
        case 5:
          var value =
            /** @type {!proto.protocol.ControlledArea.STATUS_FALG} */ (
              reader.readEnum()
            );
          msg.setStatus(value);
          break;
        case 6:
          var value = new common_pb.KeyPair();
          reader.readMessage(
            value,
            common_pb.KeyPair.deserializeBinaryFromReader,
          );
          msg.getAttributesList().push(value);
          msg.setAttributesList(msg.getAttributesList());
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetControlledArea} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetControlledArea.serializeBinaryToWriter = function (
  message,
  writer,
) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetControlledArea.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
  };

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.protocol.OperationSetControlledArea.prototype.serializeBinaryToWriter =
  function (writer) {
    var f = undefined;
    f = this.getDestAddress();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = this.getSTrusted();
    if (f) {
      writer.writeBool(2, f);
    }
    f = this.getSStatus();
    if (f) {
      writer.writeBool(3, f);
    }
    f = this.getTrusted();
    if (f !== 0.0) {
      writer.writeEnum(4, f);
    }
    f = this.getStatus();
    if (f !== 0.0) {
      writer.writeEnum(5, f);
    }
    f = this.getAttributesList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        6,
        f,
        common_pb.KeyPair.serializeBinaryToWriter,
      );
    }
  };

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.protocol.OperationSetControlledArea} The clone.
 */
proto.protocol.OperationSetControlledArea.prototype.cloneMessage = function () {
  return /** @type {!proto.protocol.OperationSetControlledArea} */ (
    jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationSetControlledArea.prototype.getDestAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
  };

/** @param {string} value  */
proto.protocol.OperationSetControlledArea.prototype.setDestAddress = function (
  value,
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bool s_trusted = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.OperationSetControlledArea.prototype.getSTrusted = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};

/** @param {boolean} value  */
proto.protocol.OperationSetControlledArea.prototype.setSTrusted = function (
  value,
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bool s_status = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.OperationSetControlledArea.prototype.getSStatus = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};

/** @param {boolean} value  */
proto.protocol.OperationSetControlledArea.prototype.setSStatus = function (
  value,
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ControlledArea.TRUST_FLAG trusted = 4;
 * @return {!proto.protocol.ControlledArea.TRUST_FLAG}
 */
proto.protocol.OperationSetControlledArea.prototype.getTrusted = function () {
  return /** @type {!proto.protocol.ControlledArea.TRUST_FLAG} */ (
    jspb.Message.getFieldProto3(this, 4, 0)
  );
};

/** @param {!proto.protocol.ControlledArea.TRUST_FLAG} value  */
proto.protocol.OperationSetControlledArea.prototype.setTrusted = function (
  value,
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional ControlledArea.STATUS_FALG status = 5;
 * @return {!proto.protocol.ControlledArea.STATUS_FALG}
 */
proto.protocol.OperationSetControlledArea.prototype.getStatus = function () {
  return /** @type {!proto.protocol.ControlledArea.STATUS_FALG} */ (
    jspb.Message.getFieldProto3(this, 5, 0)
  );
};

/** @param {!proto.protocol.ControlledArea.STATUS_FALG} value  */
proto.protocol.OperationSetControlledArea.prototype.setStatus = function (
  value,
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * repeated KeyPair attributes = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protocol.KeyPair>}
 */
proto.protocol.OperationSetControlledArea.prototype.getAttributesList =
  function () {
    return /** @type{!Array.<!proto.protocol.KeyPair>} */ (
      jspb.Message.getRepeatedWrapperField(this, common_pb.KeyPair, 6)
    );
  };

/** @param {Array.<!proto.protocol.KeyPair>} value  */
proto.protocol.OperationSetControlledArea.prototype.setAttributesList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 6, value);
  };

proto.protocol.OperationSetControlledArea.prototype.clearAttributesList =
  function () {
    this.setAttributesList([]);
  };

/**
 * @enum {number}
 */
proto.protocol.Limit = {
  UNKNOWN: 0,
  SIGNATURE: 100,
};

goog.object.extend(exports, proto.protocol);
