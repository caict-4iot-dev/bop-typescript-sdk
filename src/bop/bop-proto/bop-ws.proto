syntax = "proto3";
package bopws;

// 定义心跳消息、错误提示和订阅类型的枚举
enum MessageType {
    HEARTBEAT = 0;      // 心跳消息
    ERROR = -1;         // 连接返回错误提示
    BLOCK_HEADER = 1;   // 订阅区块头
    BID_TRANSACTION = 2;// 订阅指定bid的交易
    TLOG = 3;           // 订阅TLOG
    DISCARD_TRANSACTION = 4; // 订阅丢弃交易
}

// 心跳消息（可以是ping或pong）
message HeartbeatMessage {
    string message = 1; // 可选的附加信息，如"ping"或"pong"
}

message SubscribeRequest {
    repeated string message = 1;
}

message LedgerHeaderMessage
{
	int64	seq 		            = 1;
	string	hash 					= 2;
	string	previous_hash 			= 3 [json_name = "previous_hash"];
	string	account_tree_hash		= 4 [json_name = "account_tree_hash"];
	int64   close_time 				= 5 [json_name = "close_time"];
	string   consensus_value_hash    = 6 [json_name = "consensus_value_hash"];
	int64	version 			    = 7;
	int64	tx_count 				= 8 [json_name = "tx_count"];
	string   validators_hash = 9 [json_name = "validators_hash"];	// hash
	string	fees_hash = 10 [json_name = "fees_hash"];
}

message Contract{
    enum ContractType{
		JAVASCRIPT = 0;
		EVM = 1;
		SYSTEM = 2;
	}
	ContractType type = 1;
	string payload = 2;
}

message Signer {
	enum Limit{
		SIGNER_NONE = 0;
		SIGNER = 100;
	};
	string address = 1;
	int64 weight = 2;
}

message AccountPrivilege {
	int64 master_weight = 1 [json_name = "master_weight"];
	repeated Signer signers = 2;
	AccountThreshold thresholds = 3;
}

message OperationTypeThreshold{
    enum Type {
		UNKNOWN = 0;
		CREATE_ACCOUNT 			= 1;
		SET_METADATA			= 4;
		SET_SIGNER_WEIGHT		= 5;
		SET_THRESHOLD			= 6;
		PAY_COIN                = 7;
		LOG						= 8;
		SET_PRIVILEGE			= 9;
		UPGRADE_CONTRACT		= 10;
		SET_CONTROLLED_AREA     = 11;
        AUTHORIZE_TRANSFER      = 12;
	};
	Type type = 1;
	int64 threshold = 2;
}

message AccountThreshold{
	int64 tx_threshold = 1 [json_name = "tx_threshold"]; //required, [-1,MAX(INT64)] -1: indicates no setting
	repeated OperationTypeThreshold type_thresholds = 2 [json_name = "type_thresholds"];
}

message OperationCreateAccount{
	string dest_address = 1 [json_name = "dest_address"];
	Contract contract = 2;
	AccountPrivilege priv = 3;
	repeated KeyPair metadatas = 4;	
	int64	init_balance = 5 [json_name = "init_balance"];
	string  init_input = 6 [json_name = "init_input"];
}

message OperationPayCoin {
  string dest_address = 1 [json_name = "dest_address"];
  int64 amount = 2;
  string input = 3;
}

message OperationSetMetadata{
	string	key = 1;  
	string  value = 2;
	int64 	version = 3; //optional
	bool    delete_flag = 4 [json_name = "delete_flag"];
}

message OperationUpgradeContract {
	string dest_address = 1 [json_name = "dest_address"];
	string payload = 2;
	int64  type = 3;
}

message OperationSetSignerWeight{
	int64 master_weight = 1 [json_name = "master_weight"]; //required, [-1,MAX(UINT32)] -1: indicates no setting
	repeated Signer signers = 2; //address:weight, if weight is 0, it indicates deleting this signer
}

message OperationSetThreshold{
	int64 tx_threshold = 1;
	repeated OperationTypeThreshold type_thresholds = 4 [json_name = "type_thresholds"]; //type:threshold, threshold:0 indicates deleting this type
}

message OperationLog{
	string topic = 1;
	repeated string datas = 2;
    repeated string topics = 3; //for evm
}

message OperationSetPrivilege{
	string master_weight = 1 [json_name = "master_weight"];
	repeated Signer signers = 2;
	string tx_threshold = 3 [json_name = "tx_threshold"];
	repeated OperationTypeThreshold type_thresholds = 4 [json_name = "type_thresholds"];
}

message ControlledArea{
	enum TRUST_FLAG {
		UNCERT        = 0;
		TRUSTED       = 1;
		UNTRUSTED     = 2;
	};
	
	enum STATUS_FALG {
		ENABLED        = 0;
		DISABLED       = 1;
	};
	
    TRUST_FLAG trusted = 1;
	STATUS_FALG status = 2;
	repeated KeyPair attributes = 3 ;
}

message OperationSetControlledArea {
	string dest_address = 1 [json_name = "dest_address"];
	bool s_trusted = 2 [json_name = "s_trusted"];
	bool s_status = 3 [json_name = "s_status"];
    ControlledArea.TRUST_FLAG trusted = 4;
	ControlledArea.STATUS_FALG status = 5;
	repeated KeyPair attributes = 6; 
}

message OperationAuthorizeTransfer{
    string dest_address = 1 [json_name = "dest_address"];
    bool   auth = 2;
}

message Operation {
	enum Type {
		UNKNOWN = 0;
		CREATE_ACCOUNT 			= 1;
		SET_METADATA			= 4;
		SET_SIGNER_WEIGHT		= 5;
		SET_THRESHOLD			= 6;
		PAY_COIN                = 7;
		LOG						= 8;
		SET_PRIVILEGE			= 9;
		UPGRADE_CONTRACT		= 10;
		SET_CONTROLLED_AREA     = 11;
        AUTHORIZE_TRANSFER      = 12;
	};
	Type type = 1;
	string source_address = 2 [json_name = "source_address"];
	string metadata	= 3;

	OperationCreateAccount		create_account 	   = 4 [json_name = "create_account"];
	OperationSetMetadata		set_metadata	   = 7 [json_name = "set_metadata"];
	OperationSetSignerWeight	set_signer_weight  = 8 [json_name = "set_signer_weight"];
	OperationSetThreshold		set_threshold 	   = 9 [json_name = "set_threshold"];
	OperationPayCoin			pay_coin           = 10 [json_name = "pay_coin"];
	OperationLog				log				   = 11;
	OperationSetPrivilege		set_privilege	   = 12 [json_name = "set_privilege"];
	OperationUpgradeContract	upgrade_contract   = 13 [json_name = "upgrade_contract"];
	OperationSetControlledArea	set_controlled_area   = 14 [json_name = "set_controlled_area"];
    OperationAuthorizeTransfer  authorize_transfer  = 15 [json_name = "authorize_transfer"];
}

message Transaction {
  enum TxType{
    INCREASE_NONCE   = 0;
    RANDOM_NONCE   = 1;
  };
  string source_address = 1 [json_name = "source_address"];
  int64 fee_limit = 2 [json_name = "fee_limit"];
  int64 gas_price = 3 [json_name = "gas_price"];
  string nonce = 4;
  string metadata = 5;
  TxType nonce_type = 6 [json_name = "nonce_type"];
  int64 max_ledger_seq = 7 [json_name = "max_ledger_seq"];
  repeated Operation operations = 8;
}

message Trigger{
	enum TransactionType{
		NORMAL_TRANSACTION	 = 0;
		CONTRACT_TRANSACTION = 1;
	};

	message OperationTrigger{
		bytes hash = 1;
		int64 index = 2;
	}
	TransactionType transaction_type = 1;
	int64 ledger_seq = 2 [json_name = "ledger_seq"];  //If it is triggered by a specific block (temporarily not provided)
	OperationTrigger transaction = 3;  //If it's a transaction triggered
	
}

message TransactionEnv {
	Transaction transaction = 1;
	repeated Signature signatures 	= 2;
	Trigger trigger = 3;
}

message TransactionEnvStoreMessage {
	TransactionEnv transaction_env = 1  [json_name = "transaction_env"];
	int32 error_code = 2 [json_name = "error_code"];
	string error_desc = 3 [json_name = "error_desc"];
	int64 ledger_seq = 4 [json_name = "ledger_seq"];
	int64 close_time = 5 [json_name = "close_time"];
	//for notify
	string hash = 6;
	int64 actual_fee = 7 [json_name = "actual_fee"];
	repeated string contract_tx_hashes = 8 [json_name = "contract_tx_hashes"];
}

message Signature {
	string public_key = 1 [json_name = "public_key"];
	string sign_data = 2 [json_name = "sign_data"];
}

message KeyPair{
	string key = 1;
	string value = 2;
	int64 version = 3;
}

message DropTxMessage {
    enum PoolType{
		PLATFORM   = 0;
		CHAIN   = 1;
	};
	string tx_hash = 1 [json_name = "tx_hash"];
	PoolType source = 2;
	int64 timestamp = 3;
	string tx = 4; //序列化Transaction数据
}
